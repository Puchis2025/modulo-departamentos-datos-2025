import React, { useState, useEffect, createContext, useContext, useRef } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, getDoc, setDoc, collection, onSnapshot, addDoc, deleteDoc, query, where, getDocs, Timestamp } from 'firebase/firestore';

// Contexto para Firebase y autenticación
const FirebaseContext = createContext(null);

// Componente para el Modal Personalizado
const CustomModal = ({ isOpen, onClose, title, children, onConfirm }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-md">
        <div className="flex justify-between items-center border-b pb-3 mb-4">
          <h2 className="text-xl font-semibold text-gray-800">{title}</h2>
          <button
            onClick={onClose}
            className="text-gray-500 hover:text-gray-700 text-2xl leading-none font-bold"
            aria-label="Cerrar"
          >
            &times;
          </button>
        </div>
        <div className="text-gray-700">
          {children}
        </div>
        <div className="mt-6 flex justify-end space-x-2">
          {onConfirm && (
            <button
              onClick={onConfirm}
              className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50 transition duration-150 ease-in-out"
            >
              Confirmar
            </button>
          )}
          <button
            onClick={onClose}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition duration-150 ease-in-out"
          >
            Cerrar
          </button>
        </div>
      </div>
    </div>
  );
};

// Componente ErrorBoundary
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null, errorInfo: null };
  }

  static getDerivedStateFromError(error) {
    // Actualiza el estado para que el siguiente renderizado muestre la UI de fallback.
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    // También puedes registrar el error en un servicio de informes de errores
    console.error("ErrorBoundary capturó un error: ", error, errorInfo);
    this.setState({ error, errorInfo });
  }

  render() {
    if (this.state.hasError) {
      // Puedes renderizar cualquier UI de fallback personalizada
      return (
        <div className="flex flex-col items-center justify-center h-screen bg-red-100 text-red-800 p-6 rounded-lg shadow-md">
          <h1 className="text-2xl font-bold mb-4">¡Algo salió mal!</h1>
          <p className="text-lg text-center mb-4">
            Lo sentimos, ha ocurrido un error inesperado en la aplicación.
          </p>
          <details className="text-sm text-left bg-red-50 p-4 rounded-md overflow-auto max-h-60 w-full">
            <summary className="font-semibold cursor-pointer">Detalles del Error</summary>
            {this.state.error && this.state.error.toString()}
            <br />
            {this.state.errorInfo && this.state.errorInfo.componentStack}
          </details>
          <button
            onClick={() => window.location.reload()}
            className="mt-6 px-6 py-3 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50 transition duration-150 ease-in-out"
          >
            Recargar Aplicación
          </button>
        </div>
      );
    }

    return this.props.children;
  }
}

// Componente principal de la aplicación
function App() {
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  const [userId, setUserId] = useState(null);
  const [loadingFirebase, setLoadingFirebase] = useState(true);
  const [activeSection, setActiveSection] = useState('inicio'); // Sección activa, ahora por defecto 'inicio'
  const [activeDepartmentSubSection, setActiveDepartmentSubSection] = useState(null); // Nuevo estado para sub-secciones de departamentos
  const [showDepartmentSubMenu, setShowDepartmentSubMenu] = useState(false); // Estado para controlar visibilidad del sub-menú de departamentos
  const [activeArrendatariosSubSection, setActiveArrendatariosSubSection] = useState(null); // Nuevo estado para sub-secciones de arrendatarios
  const [showArrendatariosSubMenu, setShowArrendatariosSubMenu] = useState(false); // Estado para controlar visibilidad del sub-menú de arrendatarios
  const [activePagosSubSection, setActivePagosSubSection] = useState(null); // Nuevo estado para sub-secciones de pagos
  const [showPagosSubMenu, setShowPagosSubMenu] = useState(false); // Estado para controlar visibilidad del sub-menú de pagos
  const [activeContratosSubSection, setActiveContratosSubSection] = useState(null); // Estado para sub-secciones de contratos
  const [showContratosSubMenu, setShowContratosSubMenu] = useState(false); // Estado para controlar visibilidad del sub-menú de contratos
  const [activeReportesSubSection, setActiveReportesSubSection] = useState(null); // NUEVO: Estado para sub-secciones de reportes
  const [showReportesSubMenu, setShowReportesSubMenu] = useState(false); // NUEVO: Estado para controlar visibilidad del sub-menú de reportes
  const [activeNotificacionesSubSection, setActiveNotificacionesSubSection] = useState(null); // Nuevo estado para sub-secciones de notificaciones
  const [showNotificacionesSubMenu, setShowNotificacionesSubMenu] = useState(false); // Estado para controlar visibilidad del sub-menú de notificaciones
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalContent, setModalContent] = useState({ title: '', message: '', onConfirm: null });

  // Información de la versión del sistema
  const systemInfo = {
    name: "Sistema de Cobranza App",
    version: "1.0.3", // Versión actual
    versionDate: "06 de Julio de 2025",
    developmentStartDate: "01 de Julio de 2025",
    technicalTeam: "Equipo de Desarrollo Gemini"
  };

  // Bitácora de versiones
  const versionLog = [
    { version: "1.0.0", date: "01 de Julio de 2025", description: "Lanzamiento inicial del sistema con módulos de Departamentos, Arrendatarios, Contratos, Pagos, Reportes y Notificaciones. Incluye gestión básica de datos y generación de contratos.", responsible: "Equipo de Desarrollo Gemini" },
    { version: "1.0.1", date: "02 de Julio de 2025", description: "Corrección de errores menores en la validación de formularios y mejoras en la interfaz de usuario.", responsible: "Equipo de Desarrollo Gemini" },
    { version: "1.0.2", date: "04 de Julio de 2025", description: "Implementación de validación de edad para arrendatarios (mayores de 18 años).", responsible: "Equipo de Desarrollo Gemini" },
    { version: "1.0.3", date: "06 de Julio de 2025", description: "Implementación del módulo 'Acerca de' y visualización de la versión en el footer. Mejoras en la generación de contratos y reportes PDF.", responsible: "Equipo de Desarrollo Gemini" },
  ];


  // Función para mostrar el modal personalizado
  const showModal = (title, message, onConfirm = null) => {
    setModalContent({ title, message, onConfirm });
    setIsModalOpen(true);
  };

  // Inicialización de Firebase y autenticación
  useEffect(() => {
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};

    if (Object.keys(firebaseConfig).length === 0) {
      console.error("Firebase config is missing. Cannot initialize Firebase.");
      setLoadingFirebase(false);
      return;
    }

    const app = initializeApp(firebaseConfig);
    const firestoreDb = getFirestore(app);
    const firebaseAuth = getAuth(app);

    setDb(firestoreDb);
    setAuth(firebaseAuth);

    const unsubscribe = onAuthStateChanged(firebaseAuth, async (user) => {
      if (user) {
        setUserId(user.uid);
        console.log("Usuario autenticado:", user.uid);
      } else {
        console.log("No hay usuario autenticado, intentando inicio de sesión anónimo o con token.");
        try {
          if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
            await signInWithCustomToken(firebaseAuth, __initial_auth_token);
            console.log("Inicio de sesión con token personalizado exitoso.");
          } else {
            await signInAnonymously(firebaseAuth);
            console.log("Inicio de sesión anónimo exitoso.");
          }
        } catch (error) {
          console.error("Error durante el inicio de sesión de Firebase:", error);
          showModal("Error de Autenticación", `No se pudo iniciar sesión en Firebase: ${error.message}`);
        }
      }
      setLoadingFirebase(false);
    });

    // Dynamically load html2pdf.js
    const script = document.createElement('script');
    script.src = "https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js";
    script.async = true;
    script.onload = () => console.log("html2pdf.js loaded successfully");
    script.onerror = (e) => console.error("Error loading html2pdf.js:", e);
    document.body.appendChild(script); // Append to body to ensure it's loaded after DOM

    // Limpiar el listener y el script al desmontar el componente
    return () => {
      unsubscribe();
      if (document.body.contains(script)) {
        document.body.removeChild(script);
      }
    };
  }, [db, auth, showModal]); // Added db and auth to dependencies to prevent infinite loop on showModal

  if (loadingFirebase) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-100">
        <div className="text-center text-gray-700">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900 mx-auto mb-4"></div>
          <p className="text-lg">Cargando aplicación...</p>
        </div>
      </div>
    );
  }

  if (!userId) {
    return (
      <div className="flex items-center justify-center h-screen bg-red-100 text-red-800 p-6">
        <p className="text-lg">Error: No se pudo autenticar al usuario. Por favor, recargue la página.</p>
      </div>
    );
  }

  return (
    <ErrorBoundary>
      <FirebaseContext.Provider value={{ db, auth, userId, showModal }}>
        <div className="min-h-screen bg-gray-100 font-sans text-gray-900 flex flex-col"> {/* flex-col para header y luego sidebar+main */}
          {/* Encabezado */}
          <header className="bg-blue-700 text-white shadow-lg p-4">
            <div className="container mx-auto flex justify-between items-center">
              <h1 className="text-3xl font-bold">Sistema de Cobranza</h1>
              <p className="text-sm text-blue-100">
                ID de Usuario Actual: <span className="font-mono text-blue-200">{userId}</span>
              </p>
            </div>
          </header>

          {/* Contenido Principal con Barra Lateral */}
          <div className="flex flex-1"> {/* flex-1 para que ocupe el espacio restante */}
            {/* Barra Lateral de Navegación */}
            <aside className="w-64 bg-blue-800 text-white p-4 shadow-xl flex-shrink-0 rounded-br-lg">
              <nav className="flex flex-col space-y-2 text-lg">
                {/* Inicio Button */}
                <button
                  onClick={() => {
                    setActiveSection('inicio');
                    setShowDepartmentSubMenu(false);
                    setShowArrendatariosSubMenu(false);
                    setShowPagosSubMenu(false);
                    setShowContratosSubMenu(false);
                    setShowReportesSubMenu(false); // Close other sub-menus
                    setShowNotificacionesSubMenu(false);
                  }}
                  className={`px-4 py-3 rounded-md text-left transition duration-300 ease-in-out ${activeSection === 'inicio' ? 'bg-blue-900 font-semibold' : 'hover:bg-blue-700'}`}
                >
                  🏠 Inicio
                </button>

                {/* Departamentos Parent Button (now controls sub-menu visibility) */}
                <button
                  onClick={() => {
                    setActiveSection('departamentos');
                    setActiveDepartmentSubSection(null); // Reset sub-section when main button is clicked
                    setShowDepartmentSubMenu(!showDepartmentSubMenu); // Toggle sub-menu visibility
                    setShowArrendatariosSubMenu(false); // Close other sub-menus
                    setShowPagosSubMenu(false); // Close other sub-menus
                    setShowContratosSubMenu(false); // Close other sub-menus
                    setShowReportesSubMenu(false); // Close other sub-menus
                    setShowNotificacionesSubMenu(false); // Close other sub-menus
                  }}
                  className={`px-4 py-3 rounded-md text-left transition duration-300 ease-in-out flex justify-between items-center ${activeSection === 'departamentos' ? 'bg-blue-900 font-semibold' : 'hover:bg-blue-700'}`}
                >
                  🏢 Departamentos
                  {/* Simple arrow icon for expand/collapse */}
                  <span>{showDepartmentSubMenu ? '▲' : '▼'}</span>
                </button>

                {/* Sub-menu for Departamentos */}
                {showDepartmentSubMenu && (
                  <div className="flex flex-col pl-6 space-y-1">
                    <button
                      onClick={() => { setActiveDepartmentSubSection(null); setActiveSection('departamentos'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activeDepartmentSubSection === null ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600 text-blue-300'}`}
                    >
                      Selecciona una opción
                    </button>
                    <button
                      onClick={() => { setActiveDepartmentSubSection('new'); setActiveSection('departamentos'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activeDepartmentSubSection === 'new' && activeSection === 'departamentos' ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600'}`}
                    >
                      ✨ Nuevo Departamento
                    </button>
                    <button
                      onClick={() => { setActiveDepartmentSubSection('available'); setActiveSection('departamentos'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activeDepartmentSubSection === 'available' && activeSection === 'departamentos' ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600'}`}
                    >
                      ✅ Disponibles
                    </button>
                    <button
                      onClick={() => { setActiveDepartmentSubSection('occupied'); setActiveSection('departamentos'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activeDepartmentSubSection === 'occupied' && activeSection === 'departamentos' ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600'}`}
                    >
                      🏠 Ocupados
                    </button>
                  </div>
                )}

                {/* Arrendatarios Parent Button (now controls sub-menu visibility) */}
                <button
                  onClick={() => {
                    setActiveSection('arrendatarios');
                    setActiveArrendatariosSubSection(null); // Reset sub-section when main button is clicked
                    setShowArrendatariosSubMenu(!showArrendatariosSubMenu); // Toggle sub-menu visibility
                    setShowDepartmentSubMenu(false); // Close other sub-menus
                    setShowPagosSubMenu(false); // Close other sub-menus
                    setShowContratosSubMenu(false); // Close other sub-menus
                    setShowReportesSubMenu(false); // Close other sub-menus
                    setShowNotificacionesSubMenu(false); // Close other sub-menus
                  }}
                  className={`px-4 py-3 rounded-md text-left transition duration-300 ease-in-out flex justify-between items-center ${activeSection === 'arrendatarios' ? 'bg-blue-900 font-semibold' : 'hover:bg-blue-700'}`}
                >
                  👥 Arrendatarios
                  <span>{showArrendatariosSubMenu ? '▲' : '▼'}</span>
                </button>

                {/* Sub-menu for Arrendatarios */}
                {showArrendatariosSubMenu && (
                  <div className="flex flex-col pl-6 space-y-1">
                    <button
                      onClick={() => { setActiveArrendatariosSubSection(null); setActiveSection('arrendatarios'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activeArrendatariosSubSection === null ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600 text-blue-300'}`}
                    >
                      Selecciona una opción
                    </button>
                    <button
                      onClick={() => { setActiveArrendatariosSubSection('new'); setActiveSection('arrendatarios'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activeArrendatariosSubSection === 'new' && activeSection === 'arrendatarios' ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600'}`}
                    >
                      ➕ Nuevo
                    </button>
                    {/* Renamed "Todos los arrendatarios" to "Lista de arrendatarios" */}
                    <button
                      onClick={() => { setActiveArrendatariosSubSection('all'); setActiveSection('arrendatarios'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activeArrendatariosSubSection === 'all' && activeSection === 'arrendatarios' ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600'}`}
                    >
                      📋 Lista de arrendatarios
                    </button>
                    {/* Moved "Datos del arrendatario" here */}
                    <button
                      onClick={() => { setActiveArrendatariosSubSection('details'); setActiveSection('arrendatarios'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activeArrendatariosSubSection === 'details' && activeSection === 'arrendatarios' ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600'}`}
                    >
                      👤 Datos del arrendatario
                    </button>
                    <button
                      onClick={() => { setActiveArrendatariosSubSection('active'); setActiveSection('arrendatarios'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activeArrendatariosSubSection === 'active' && activeSection === 'arrendatarios' ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600'}`}
                    >
                      ✅ Arrendatarios activos
                    </button>
                    <button
                      onClick={() => { setActiveArrendatariosSubSection('inactive'); setActiveSection('arrendatarios'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activeArrendatariosSubSection === 'inactive' && activeSection === 'arrendatarios' ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600'}`}
                    >
                      ❌ Arrendatarios inactivos
                    </button>
                  </div>
                )}

                {/* Contratos Parent Button */}
                <button
                  onClick={() => {
                    setActiveSection('contratos');
                    setActiveContratosSubSection(null); // Reset sub-section when main button is clicked
                    setShowContratosSubMenu(!showContratosSubMenu); // Toggle sub-menu visibility
                    setShowDepartmentSubMenu(false); // Close other sub-menus
                    setShowArrendatariosSubMenu(false); // Close other sub-menus
                    setShowPagosSubMenu(false); // Close other sub-menus
                    setShowReportesSubMenu(false); // Close other sub-menus
                    setShowNotificacionesSubMenu(false); // Close other sub-menus
                  }}
                  className={`px-4 py-3 rounded-md text-left transition duration-300 ease-in-out flex justify-between items-center ${activeSection === 'contratos' ? 'bg-blue-900 font-semibold' : 'hover:bg-blue-700'}`}
                >
                  📄 Contratos
                  <span>{showContratosSubMenu ? '▲' : '▼'}</span>
                </button>

                {/* Sub-menu for Contratos */}
                {showContratosSubMenu && (
                  <div className="flex flex-col pl-6 space-y-1">
                    <button
                      onClick={() => { setActiveContratosSubSection(null); setActiveSection('contratos'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activeContratosSubSection === null ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600 text-blue-300'}`}
                    >
                      Selecciona una opción
                    </button>
                    <button
                      onClick={() => { setActiveContratosSubSection('newContract'); setActiveSection('contratos'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activeContratosSubSection === 'newContract' && activeSection === 'contratos' ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600'}`}
                    >
                      ➕ Nuevo Contrato
                    </button>
                    <button
                      onClick={() => { setActiveContratosSubSection('reprintContract'); setActiveSection('contratos'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activeContratosSubSection === 'reprintContract' && activeSection === 'contratos' ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600'}`}
                    >
                      🖨️ Reimprimir Contrato
                    </button>
                  </div>
                )}

                {/* Pagos Parent Button (now controls sub-menu visibility) */}
                <button
                  onClick={() => {
                    setActiveSection('pagos');
                    setActivePagosSubSection(null); // Reset sub-section when main button is clicked
                    setShowPagosSubMenu(!showPagosSubMenu); // Toggle sub-menu visibility
                    setShowDepartmentSubMenu(false); // Close other sub-menus
                    setShowArrendatariosSubMenu(false); // Close other sub-menus
                    setShowContratosSubMenu(false); // Close other sub-menus
                    setShowReportesSubMenu(false); // Close other sub-menus
                    setShowNotificacionesSubMenu(false); // Close other sub-menus
                  }}
                  className={`px-4 py-3 rounded-md text-left transition duration-300 ease-in-out flex justify-between items-center ${activeSection === 'pagos' ? 'bg-blue-900 font-semibold' : 'hover:bg-blue-700'}`}
                >
                  💰 Pagos
                  <span>{showPagosSubMenu ? '▲' : '▼'}</span>
                </button>

                {/* Sub-menu for Pagos */}
                {showPagosSubMenu && (
                  <div className="flex flex-col pl-6 space-y-1">
                    <button
                      onClick={() => { setActivePagosSubSection(null); setActiveSection('pagos'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activePagosSubSection === null ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600 text-blue-300'}`}
                    >
                      Selecciona una opción
                    </button>
                    <button
                      onClick={() => { setActivePagosSubSection('newPayment'); setActiveSection('pagos'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activePagosSubSection === 'newPayment' && activeSection === 'pagos' ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600'}`}
                    >
                      ➕ Nuevo Pago
                    </button>
                    <button
                      onClick={() => { setActivePagosSubSection('collectedPayments'); setActiveSection('pagos'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activePagosSubSection === 'collectedPayments' && activeSection === 'pagos' ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600'}`}
                    >
                      ✅ Pagos Cobrados
                    </button>
                    <button
                      onClick={() => { setActivePagosSubSection('credits'); setActiveSection('pagos'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activePagosSubSection === 'credits' && activeSection === 'pagos' ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600'}`}
                    >
                      ➕ Abonos
                    </button>
                    <button
                      onClick={() => { setActivePagosSubSection('overdueBalances'); setActiveSection('pagos'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activePagosSubSection === 'overdueBalances' && activeSection === 'pagos' ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600'}`}
                    >
                      ⚠️ Saldos Vencidos
                    </button>
                  </div>
                )}

                {/* Reportes Parent Button */}
                <button
                  onClick={() => {
                    setActiveSection('reportes');
                    setActiveReportesSubSection(null); // Reset sub-section
                    setShowReportesSubMenu(!showReportesSubMenu); // Toggle sub-menu visibility
                    setShowDepartmentSubMenu(false); // Close other sub-menus
                    setShowArrendatariosSubMenu(false);
                    setShowPagosSubMenu(false);
                    setShowContratosSubMenu(false);
                    setShowNotificacionesSubMenu(false);
                  }}
                  className={`px-4 py-3 rounded-md text-left transition duration-300 ease-in-out flex justify-between items-center ${activeSection === 'reportes' ? 'bg-blue-900 font-semibold' : 'hover:bg-blue-700'}`}
                >
                  📊 Reportes
                  <span>{showReportesSubMenu ? '▲' : '▼'}</span>
                </button>

                {/* Sub-menu for Reportes */}
                {showReportesSubMenu && (
                  <div className="flex flex-col pl-6 space-y-1">
                    <button
                      onClick={() => { setActiveReportesSubSection(null); setActiveSection('reportes'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activeReportesSubSection === null ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600 text-blue-300'}`}
                    >
                      Selecciona una opción
                    </button>
                    <button
                      onClick={() => { setActiveReportesSubSection('futureCollections'); setActiveSection('reportes'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activeReportesSubSection === 'futureCollections' && activeSection === 'reportes' ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600'}`}
                    >
                      💸 Cobros Futuros
                    </button>
                    <button
                      onClick={() => { setActiveReportesSubSection('tenantAccountStatement'); setActiveSection('reportes'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activeReportesSubSection === 'tenantAccountStatement' && activeSection === 'reportes' ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600'}`}
                    >
                      📝 Estado Cuenta del Arrendatario
                    </button>
                    {/* Removed 'Ejemplo de Impresión' option */}
                  </div>
                )}

                {/* Notificaciones Parent Button (now controls sub-menu visibility) */}
                <button
                  onClick={() => {
                    setActiveSection('notificaciones');
                    setActiveNotificacionesSubSection(null); // Reset sub-section when main button is clicked
                    setShowNotificacionesSubMenu(!showNotificacionesSubMenu); // Toggle sub-menu visibility
                    setShowDepartmentSubMenu(false); // Close other sub-menus
                    setShowArrendatariosSubMenu(false); // Close other sub-menus
                    setShowPagosSubMenu(false); // Close other sub-menus
                    setShowContratosSubMenu(false); // Close other sub-menus
                    setShowReportesSubMenu(false); // Close other sub-menus
                  }}
                  className={`px-4 py-3 rounded-md text-left transition duration-300 ease-in-out flex justify-between items-center ${activeSection === 'notificaciones' ? 'bg-blue-900 font-semibold' : 'hover:bg-blue-700'}`}
                >
                  🔔 Notificaciones
                  <span>{showNotificacionesSubMenu ? '▲' : '▼'}</span>
                </button>

                {/* Sub-menu for Notificaciones */}
                {showNotificacionesSubMenu && (
                  <div className="flex flex-col pl-6 space-y-1">
                    <button
                      onClick={() => { setActiveNotificacionesSubSection(null); setActiveSection('notificaciones'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activeNotificacionesSubSection === null ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600 text-blue-300'}`}
                    >
                      Selecciona una opción
                    </button>
                    <button
                      onClick={() => { setActiveNotificacionesSubSection('collectToday'); setActiveSection('notificaciones'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activeNotificacionesSubSection === 'collectToday' && activeSection === 'notificaciones' ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600'}`}
                    >
                      📅 Cobrar Hoy
                    </button>
                    <button
                      onClick={() => { setActiveNotificacionesSubSection('incompleteTenantData'); setActiveSection('notificaciones'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activeNotificacionesSubSection === 'incompleteTenantData' && activeSection === 'notificaciones' ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600'}`}
                    >
                      📝 Datos Incompletos del Arrendatario
                    </button>
                    <button
                      onClick={() => { setActiveNotificacionesSubSection('updateTenantData'); setActiveSection('notificaciones'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activeNotificacionesSubSection === 'updateTenantData' && activeSection === 'notificaciones' ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600'}`}
                    >
                      ✍️ Actualizar Datos del Arrendatario
                    </button>
                    <button
                      onClick={() => { setActiveNotificacionesSubSection('expiredContracts'); setActiveSection('notificaciones'); }}
                      className={`px-4 py-2 rounded-md text-left transition duration-300 ease-in-out ${activeNotificacionesSubSection === 'expiredContracts' && activeSection === 'notificaciones' ? 'bg-blue-700 font-semibold' : 'hover:bg-blue-600'}`}
                    >
                      📄 Contratos Vencidos
                    </button>
                  </div>
                )}


                <button
                  onClick={() => { setActiveSection('configuracion'); setActiveDepartmentSubSection(null); setShowArrendatariosSubMenu(false); setShowPagosSubMenu(false); setShowContratosSubMenu(false); setShowReportesSubMenu(false); setShowNotificacionesSubMenu(false); }}
                  className={`px-4 py-3 rounded-md text-left transition duration-300 ease-in-out ${activeSection === 'configuracion' ? 'bg-blue-900 font-semibold' : 'hover:bg-blue-700'}`}
                >
                  ⚙️ Configuración
                </button>

                {/* Nuevo botón "Acerca de" */}
                <button
                  onClick={() => {
                    setActiveSection('acercaDe');
                    setShowDepartmentSubMenu(false);
                    setShowArrendatariosSubMenu(false);
                    setShowPagosSubMenu(false);
                    setShowContratosSubMenu(false);
                    setShowReportesSubMenu(false);
                    setShowNotificacionesSubMenu(false);
                  }}
                  className={`px-4 py-3 rounded-md text-left transition duration-300 ease-in-out ${activeSection === 'acercaDe' ? 'bg-blue-900 font-semibold' : 'hover:bg-blue-700'}`}
                >
                  ℹ️ Acerca de
                </button>
              </nav>
            </aside>

            {/* Área de Contenido Principal */}
            <main className="flex-1 p-6 bg-white rounded-tl-lg shadow-md overflow-y-auto"> {/* rounded-tl-lg para la esquina superior izquierda */}
              {activeSection === 'inicio' && <InicioSection />}
              {activeSection === 'departamentos' && (
                <DepartamentosSection activeSubSection={activeDepartmentSubSection} setActiveSubSection={setActiveDepartmentSubSection} />
              )}
              {activeSection === 'arrendatarios' && (
                <ArrendatariosSection activeSubSection={activeArrendatariosSubSection} setActiveSubSection={setActiveArrendatariosSubSection} />
              )}
              {activeSection === 'pagos' && (
                <PagosSection activeSubSection={activePagosSubSection} setActiveSubSection={setActivePagosSubSection} />
              )}
              {activeSection === 'contratos' && (
                <ContratosSection activeSubSection={activeContratosSubSection} setActiveSubSection={setActiveContratosSubSection} />
              )}
              {activeSection === 'reportes' && (
                <ReportesSection activeSubSection={activeReportesSubSection} setActiveSubSection={setActiveReportesSubSection} />
              )}
              {activeSection === 'notificaciones' && (
                <NotificacionesSection activeSubSection={activeNotificacionesSubSection} setActiveSubSection={setActiveNotificacionesSubSection} />
              )}
              {activeSection === 'configuracion' && <ConfiguracionSection />}
              {activeSection === 'acercaDe' && <AcercaDeSection systemInfo={systemInfo} versionLog={versionLog} />}
            </main>
          </div>

          {/* Footer */}
          <footer className="py-4 bg-gray-800 text-white text-center text-sm">
            <p>&copy; {new Date().getFullYear()} Sistema de Cobranza. Todos los derechos reservados. Versión: {systemInfo.version}</p>
          </footer>

          {/* Modal Personalizado con botón de confirmación opcional */}
          <CustomModal
            isOpen={isModalOpen}
            onClose={() => {
              setIsModalOpen(false);
              setModalContent({ title: '', message: '', onConfirm: null }); // Reiniciar al cerrar
            }}
            title={modalContent.title}
            onConfirm={modalContent.onConfirm} // Pasar onConfirm al modal
          >
            <p>{modalContent.message}</p>
          </CustomModal>
        </div>
      </FirebaseContext.Provider>
    </ErrorBoundary>
  );
}

// --- Componentes de Sección ---

const SectionCard = ({ title, children }) => (
  <div className="bg-white p-6 rounded-lg shadow-md mb-6">
    <h2 className="text-2xl font-bold text-blue-700 mb-4">{title}</h2>
    {children}
  </div>
);

const InicioSection = () => (
  <SectionCard title="Bienvenido al Sistema de Cobranza">
    <p className="text-gray-700">Utiliza el menú de la izquierda para navegar por las diferentes secciones de la aplicación.</p>
    <div className="mt-4 p-4 bg-blue-100 rounded-md text-blue-800">
      <h3 className="font-semibold text-lg mb-2">Funcionalidades Principales:</h3>
      <ul className="list-disc list-inside">
        <li><strong>Departamentos:</strong> Gestiona la información de tus propiedades.</li>
        <li><strong>Arrendatarios:</strong> Administra los datos de tus inquilinos.</li>
        <li><strong>Contratos:</strong> Genera y reimprime contratos de arrendamiento.</li>
        <li><strong>Pagos:</strong> Registra y consulta los pagos y saldos.</li>
        <li><strong>Reportes:</strong> Accede a informes detallados de tu gestión, incluyendo cobros futuros.</li>
        <li><strong>Notificaciones:</strong> Recibe alertas importantes sobre cobros y datos.</li>
        <li><strong>Configuración:</strong> Ajusta las preferencias de la aplicación.</li>
      </ul>
    </div>
  </SectionCard>
);

// Helper function to print HTML content in a new window
const printHtmlContent = (htmlContent, title = 'Documento') => {
  const printWindow = window.open('', '_blank');
  printWindow.document.write(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>${title}</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 20px; color: #333; }
        h1, h2, h3, h4 { color: #1e40af; text-align: center; margin-bottom: 10px; }
        p { margin-bottom: 5px; line-height: 1.5; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        th, td { border: 1px solid #d1d5db; padding: 8px; text-align: left; }
        th { background-color: #eff6ff; }
        .text-right { text-align: right; }
        .font-bold { font-weight: bold; }
        .text-sm { font-size: 0.875rem; }
        .mt-2 { margin-top: 0.5rem; }
        .mb-2 { margin-bottom: 0.5rem; }
        @media print {
          body { -webkit-print-color-adjust: exact; }
          .no-print { display: none !important; }
        }
      </style>
    </head>
    <body>
      ${htmlContent}
      <script>
        window.onload = function() {
          window.print();
          window.onafterprint = function() {
            window.close();
          };
        };
      </script>
    </body>
    </html>
  `);
  printWindow.document.close();
};


const DepartamentosSection = ({ activeSubSection, setActiveSubSection }) => {
  const { db, userId, showModal } = useContext(FirebaseContext);
  const [newDepartment, setNewDepartment] = useState({
    numeroDepartamento: '',
    rentaMensual: '',
    deposito: '',
    ocupantesMaximos: '',
    cargoAdicionalOcupanteExtra: '',
    descripcion: '',
    estado: 'activo',
    // Nuevos campos de dirección
    calle: '',
    numeroExterior: '',
    numeroInterior: '',
    colonia: '',
    ciudad: '',
    estadoDireccion: '', // Renombrado para evitar conflicto con 'estado' del departamento
    codigoPostal: ''
  });
  const [departments, setDepartments] = useState([]);
  const [loadingDepartments, setLoadingDepartments] = useState(true);
  const [isEditing, setIsEditing] = useState(false);
  const [currentDepartmentId, setCurrentDepartmentId] = useState(null);
  const [arrendatarios, setArrendatarios] = useState([]); // Nuevo estado para almacenar arrendatarios
  const [loadingArrendatarios, setLoadingArrendatarios] = useState(true);

  const listRef = useRef(null); // Ref for the list of departments for PDF generation

  // Función para obtener el número de arrendatarios para un departamento dado
  const getOccupancyCount = (departmentNumber) => {
    return arrendatarios.filter(arrendatario => arrendatario.departamentoAsignado === departmentNumber && arrendatario.estado === 'activo').length;
  };

  // Filtrar departamentos basados en activeSubSection
  const filteredDepartments = departments.filter(dept => {
    const occupancy = getOccupancyCount(dept.numeroDepartamento);
    if (activeSubSection === 'available') {
      return occupancy === 0;
    } else if (activeSubSection === 'occupied') {
      return occupancy > 0;
    }
    return true; // Mostrar todo si no hay filtro específico o 'new'
  });

  // Cargar departamentos en tiempo real
  useEffect(() => {
    if (!db || !userId) return;

    const departmentsColRef = collection(db, `artifacts/${__app_id}/users/${userId}/departamentos`);
    const unsubscribe = onSnapshot(departmentsColRef, (snapshot) => {
      const departmentsList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setDepartments(departmentsList);
      setLoadingDepartments(false);
    }, (error) => {
      console.error("Error al cargar departamentos:", error);
      showModal("Error de Carga", `No se pudieron cargar los departamentos: ${error.message}`);
      setLoadingDepartments(false);
    });

    return () => unsubscribe();
  }, [db, userId, showModal]);

  // Cargar arrendatarios para determinar ocupación
  useEffect(() => {
    if (!db || !userId) return;

    const arrendatariosColRef = collection(db, `artifacts/${__app_id}/users/${userId}/arrendatarios`);
    const unsubscribe = onSnapshot(arrendatariosColRef, (snapshot) => {
      const arrendatariosList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setArrendatarios(arrendatariosList);
      setLoadingArrendatarios(false);
    }, (error) => {
      console.error("Error al cargar arrendatarios:", error);
      showModal("Error de Carga", `No se pudieron cargar los arrendatarios para el estado de ocupación: ${error.message}`);
      setLoadingArrendatarios(false);
    });

    return () => unsubscribe();
  }, [db, userId, showModal]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    // Validar que los campos numéricos solo acepten números
    if (['rentaMensual', 'deposito', 'ocupantesMaximos', 'cargoAdicionalOcupanteExtra', 'codigoPostal'].includes(name)) {
      if (value === '' || /^\d*\.?\d*$/.test(value)) { // Permite números enteros o decimales (para CP, solo enteros)
        setNewDepartment(prev => ({ ...prev, [name]: value }));
      }
    } else {
      setNewDepartment(prev => ({ ...prev, [name]: value }));
    }
  };

  const validateForm = () => {
    const { numeroDepartamento, rentaMensual, deposito, ocupantesMaximos, cargoAdicionalOcupanteExtra, descripcion,
      calle, numeroExterior, colonia, ciudad, estadoDireccion, codigoPostal } = newDepartment;
    
    // Campos obligatorios básicos del departamento
    if (!numeroDepartamento || !rentaMensual || !deposito || !ocupantesMaximos || !cargoAdicionalOcupanteExtra || !descripcion) {
      showModal("Error de Validación", "Todos los campos obligatorios del departamento deben ser rellenados.");
      return false;
    }
    // Campos obligatorios de dirección
    if (!calle || !numeroExterior || !colonia || !ciudad || !estadoDireccion || !codigoPostal) {
      showModal("Error de Validación", "Todos los campos de la dirección del departamento deben ser rellenados.");
      return false;
    }

    if (isNaN(parseFloat(rentaMensual)) || isNaN(parseFloat(deposito)) || isNaN(parseInt(ocupantesMaximos)) || isNaN(parseFloat(cargoAdicionalOcupanteExtra))) {
      showModal("Error de Validación", "Los campos de renta, depósito, ocupantes y cargo extra deben ser números válidos.");
      return false;
    }
    if (parseInt(ocupantesMaximos) < 0 || parseFloat(rentaMensual) < 0 || parseFloat(deposito) < 0 || parseFloat(cargoAdicionalOcupanteExtra) < 0) {
      showModal("Error de Validación", "Los valores numéricos no pueden ser negativos.");
      return false;
    }
    if (codigoPostal && !/^\d{5}$/.test(codigoPostal)) {
      showModal("Error de Validación", "El Código Postal debe ser un número de 5 dígitos.");
      return false;
    }
    return true;
  };

  const handleAddOrUpdateDepartment = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    if (!db || !userId) {
      showModal("Error", "Base de datos no disponible.");
      return;
    }

    try {
      const departmentsColRef = collection(db, `artifacts/${__app_id}/users/${userId}/departamentos`);

      // Convertir valores numéricos a tipo Number
      const departmentToSave = {
        ...newDepartment,
        rentaMensual: parseFloat(newDepartment.rentaMensual),
        deposito: parseFloat(newDepartment.deposito),
        ocupantesMaximos: parseInt(newDepartment.ocupantesMaximos),
        cargoAdicionalOcupanteExtra: parseFloat(newDepartment.cargoAdicionalOcupanteExtra),
        // Asegurar que el CP se guarde como string si puede tener ceros iniciales
        codigoPostal: newDepartment.codigoPostal.toString()
      };

      if (isEditing) {
        // Actualizar departamento existente
        const docRef = doc(db, `artifacts/${__app_id}/users/${userId}/departamentos`, currentDepartmentId);
        await setDoc(docRef, { ...departmentToSave, updatedAt: Timestamp.now() }, { merge: true });
        showModal("Éxito", "Departamento actualizado correctamente.");
        setIsEditing(false);
        setCurrentDepartmentId(null);
      } else {
        // Añadir nuevo departamento
        // Verificar unicidad del numeroDepartamento
        const q = query(departmentsColRef, where("numeroDepartamento", "==", newDepartment.numeroDepartamento));
        const querySnapshot = await getDocs(q);
        if (!querySnapshot.empty) {
          showModal("Error de Creación", `Ya existe un departamento con el número ${newDepartment.numeroDepartamento}.`);
          return; // Detener la ejecución si hay duplicados
        }
        await addDoc(departmentsColRef, { ...departmentToSave, createdAt: Timestamp.now() });
        showModal("Éxito", "Departamento añadido correctamente.");
      }
      // Limpiar el formulario después de añadir o actualizar con éxito
      setNewDepartment({
        numeroDepartamento: '',
        rentaMensual: '',
        deposito: '',
        ocupantesMaximos: '',
        cargoAdicionalOcupanteExtra: '',
        descripcion: '',
        estado: 'activo',
        calle: '',
        numeroExterior: '',
        numeroInterior: '',
        colonia: '',
        ciudad: '',
        estadoDireccion: '',
        codigoPostal: ''
      });
    } catch (error) {
      console.error("Error al añadir/actualizar departamento:", error);
      showModal("Error", `No se pudo guardar el departamento: ${error.message}`);
    }
  };

  const handleEditDepartment = (department) => {
    setNewDepartment({
      numeroDepartamento: department.numeroDepartamento,
      rentaMensual: department.rentaMensual.toString(), // Convertir a string para el campo de entrada
      deposito: department.deposito.toString(),
      ocupantesMaximos: department.ocupantesMaximos.toString(),
      cargoAdicionalOcupanteExtra: department.cargoAdicionalOcupanteExtra.toString(),
      descripcion: department.descripcion,
      estado: department.estado,
      // Cargar campos de dirección
      calle: department.calle || '',
      numeroExterior: department.numeroExterior || '',
      numeroInterior: department.numeroInterior || '',
      colonia: department.colonia || '',
      ciudad: department.ciudad || '',
      estadoDireccion: department.estadoDireccion || '',
      codigoPostal: department.codigoPostal || ''
    });
    setIsEditing(true);
    setCurrentDepartmentId(department.id);
    setActiveSubSection('new'); // Cambiar a la vista del formulario para editar
  };

  const handleDeleteDepartment = (departmentId) => {
    showModal("Confirmar Eliminación", "¿Estás seguro de que quieres eliminar este departamento? Esta acción no se puede deshacer.", async () => {
      if (!db || !userId) {
        showModal("Error", "Base de datos no disponible.");
        return;
      }
      try {
        const docRef = doc(db, `artifacts/${__app_id}/users/${userId}/departamentos`, departmentId);
        await deleteDoc(docRef);
        showModal("Éxito", "Departamento eliminado correctamente.");
      } catch (error) {
        console.error("Error al eliminar departamento:", error);
        showModal("Error", `No se pudo eliminar el departamento: ${error.message}`);
      }
    });
  };

  // Función para generar el contenido HTML de un departamento para impresión
  const generateDepartmentHtml = (department) => {
    return `
      <div style="font-family: Arial, sans-serif; padding: 20px;">
        <h1 style="text-align: center; color: #1e40af;">DETALLES DEL DEPARTAMENTO</h1>
        <h2 style="text-align: center; color: #3b82f6;">Departamento #${department.numeroDepartamento}</h2>
        <br/>
        <p><strong>Renta Mensual:</strong> $${department.rentaMensual.toFixed(2)}</p>
        <p><strong>Depósito:</strong> $${department.deposito.toFixed(2)}</p>
        <p><strong>Ocupantes Máximos:</strong> ${department.ocupantesMaximos}</p>
        <p><strong>Cargo Adicional por Ocupante Extra:</strong> $${department.cargoAdicionalOcupanteExtra.toFixed(2)}</p>
        <p><strong>Descripción:</strong> ${department.descripcion}</p>
        <p><strong>Estado:</strong> ${department.estado.charAt(0).toUpperCase() + department.estado.slice(1)}</p>
        <p><strong>Ocupación Actual:</strong> ${getOccupancyCount(department.numeroDepartamento)}</p>
        <br/>
        <h3 style="color: #3b82f6;">Dirección:</h3>
        <p>${department.calle} #${department.numeroExterior} ${department.numeroInterior ? `Int. ${department.numeroInterior}` : ''}</p>
        <p>${department.colonia}, ${department.ciudad}, ${department.estadoDireccion} C.P. ${department.codigoPostal}</p>
      </div>
    `;
  };

  // Función para imprimir un departamento individual (usa window.print())
  const handlePrintDepartment = (department) => {
    const htmlContent = generateDepartmentHtml(department);
    printHtmlContent(htmlContent, `Detalles Departamento ${department.numeroDepartamento}`);
    showModal("Impresión Iniciada", `Se ha iniciado la impresión de los detalles del Departamento #${department.numeroDepartamento}.`);
  };

  // Función para descargar el PDF de un departamento individual (usa html2pdf.js)
  const handleDownloadDepartmentPdf = (department) => {
    if (typeof window.html2pdf === 'undefined') {
      showModal("Error", "La librería de PDF no se ha cargado correctamente. Por favor, recargue la página.");
      return;
    }
    const htmlContent = generateDepartmentHtml(department);
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = htmlContent;

    window.html2pdf().from(tempDiv).set({
      margin: 1,
      filename: `Departamento_${department.numeroDepartamento}_Detalles.pdf`,
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2 },
      jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
    }).save();
    showModal("PDF Generado", `Los detalles del Departamento #${department.numeroDepartamento} han sido generados como PDF y se ha iniciado la descarga.`);
  };

  // Función para generar el contenido HTML de la lista de departamentos para impresión
  const generateDepartmentListHtml = (departmentsToPrint, listType) => {
    return `
      <div style="font-family: Arial, sans-serif; padding: 20px;">
        <h1 style="text-align: center; color: #1e40af;">LISTA DE DEPARTAMENTOS ${listType.toUpperCase()}</h1>
        <p style="text-align: center; color: #6b7280;">Fecha de Reporte: ${new Date().toLocaleDateString()}</p>
        <br/>
        <table style="width: 100%; border-collapse: collapse;">
          <thead>
            <tr style="background-color: #eff6ff;">
              <th style="border: 1px solid #d1d5db; padding: 8px; text-align: left;">No. Depto</th>
              <th style="border: 1px solid #d1d5db; padding: 8px; text-align: right;">Renta Mensual ($)</th>
              <th style="border: 1px solid #d1d5db; padding: 8px; text-align: left;">Estado</th>
              <th style="border: 1px solid #d1d5db; padding: 8px; text-align: center;">Ocupación</th>
              <th style="border: 1px solid #d1d5db; padding: 8px; text-align: left;">Dirección</th>
            </tr>
          </thead>
          <tbody>
            ${departmentsToPrint.map(dept => `
              <tr>
                <td style="border: 1px solid #d1d5db; padding: 8px;">${dept.numeroDepartamento}</td>
                <td style="border: 1px solid #d1d5db; padding: 8px; text-align: right;">${dept.rentaMensual.toFixed(2)}</td>
                <td style="border: 1px solid #d1d5db; padding: 8px;">${dept.estado.charAt(0).toUpperCase() + dept.estado.slice(1)}</td>
                <td style="border: 1px solid #d1d5db; padding: 8px; text-align: center;">${getOccupancyCount(dept.numeroDepartamento)}/${dept.ocupantesMaximos}</td>
                <td style="border: 1px solid #d1d5db; padding: 8px; font-size: 0.9em;">${dept.calle} #${dept.numeroExterior}, ${dept.colonia}, ${dept.ciudad}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    `;
  };

  // Función para imprimir la lista filtrada (usa window.print())
  const handlePrintList = () => {
    let listType = '';
    if (activeSubSection === 'available') {
      listType = 'Disponibles';
    } else if (activeSubSection === 'occupied') {
      listType = 'Ocupados';
    } else {
      listType = 'Todos';
    }
    const htmlContent = generateDepartmentListHtml(filteredDepartments, listType);
    printHtmlContent(htmlContent, `Lista de Departamentos ${listType}`);
    showModal("Impresión Iniciada", `Se ha iniciado la impresión de la lista de Departamentos ${listType}.`);
  };

  // Función para descargar el PDF de la lista filtrada (usa html2pdf.js)
  const handleDownloadListPdf = () => {
    if (typeof window.html2pdf === 'undefined') {
      showModal("Error", "La librería de PDF no se ha cargado correctamente. Por favor, recargue la página.");
      return;
    }
    let listType = '';
    if (activeSubSection === 'available') {
      listType = 'Disponibles';
    } else if (activeSubSection === 'occupied') {
      listType = 'Ocupados';
    } else {
      listType = 'Todos';
    }
    const htmlContent = generateDepartmentListHtml(filteredDepartments, listType);
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = htmlContent;

    window.html2pdf().from(tempDiv).set({
      margin: 1,
      filename: `Lista_Departamentos_${listType}.pdf`,
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2 },
      jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
    }).save();
    showModal("PDF Generado", `La lista de Departamentos ${listType} ha sido generada como PDF y se ha iniciado la descarga.`);
  };


  return (
    <SectionCard title="Gestión de Departamentos">
      {activeSubSection === 'new' && (
        <div className="mb-6">
          <h3 className="text-xl font-semibold text-gray-700 mb-3">
            {isEditing ? 'Editar Departamento' : 'Añadir Nuevo Departamento'}
          </h3>
          <form onSubmit={handleAddOrUpdateDepartment} className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 bg-gray-50 p-4 rounded-lg shadow-inner">
            <div className="col-span-1">
              <label htmlFor="numeroDepartamento" className="block text-sm font-medium text-gray-700">Número de Departamento</label>
              <input
                type="text"
                id="numeroDepartamento"
                name="numeroDepartamento"
                value={newDepartment.numeroDepartamento}
                onChange={handleChange}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2"
                required
                disabled={isEditing} // Evitar cambiar el número de departamento al editar
              />
            </div>
            <div className="col-span-1">
              <label htmlFor="rentaMensual" className="block text-sm font-medium text-gray-700">Renta Mensual</label>
              <input
                type="text" // Usar texto para permitir cadena vacía para validación, luego parsear
                id="rentaMensual"
                name="rentaMensual"
                value={newDepartment.rentaMensual}
                onChange={handleChange}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2"
                required
              />
            </div>
            <div className="col-span-1">
              <label htmlFor="deposito" className="block text-sm font-medium text-gray-700">Depósito</label>
              <input
                type="text"
                id="deposito"
                name="deposito"
                value={newDepartment.deposito}
                onChange={handleChange}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2"
                required
              />
            </div>
            <div className="col-span-1">
              <label htmlFor="ocupantesMaximos" className="block text-sm font-medium text-gray-700">Ocupantes Máximos</label>
              <input
                type="text"
                id="ocupantesMaximos"
                name="ocupantesMaximos"
                value={newDepartment.ocupantesMaximos}
                onChange={handleChange}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2"
                required
              />
            </div>
            <div className="col-span-1">
              <label htmlFor="cargoAdicionalOcupanteExtra" className="block text-sm font-medium text-gray-700">Cargo Adicional por Ocupante Extra</label>
              <input
                type="text"
                id="cargoAdicionalOcupanteExtra"
                name="cargoAdicionalOcupanteExtra"
                value={newDepartment.cargoAdicionalOcupanteExtra}
                onChange={handleChange}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2"
                required
              />
            </div>
            <div className="col-span-1">
              <label htmlFor="estado" className="block text-sm font-medium text-gray-700">Estado</label>
              <select
                id="estado"
                name="estado"
                value={newDepartment.estado}
                onChange={handleChange}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2"
                required
              >
                <option value="activo">Activo</option>
                <option value="inactivo">Inactivo</option>
                <option value="mantenimiento">Mantenimiento</option>
              </select>
            </div>
            <div className="col-span-2">
              <label htmlFor="descripcion" className="block text-sm font-medium text-gray-700">Descripción</label>
              <textarea
                id="descripcion"
                name="descripcion"
                value={newDepartment.descripcion}
                onChange={handleChange}
                rows="3"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2"
                required
              ></textarea>
            </div>

            {/* Nuevos campos de Dirección */}
            <div className="col-span-full border-t pt-4 mt-4">
              <h4 className="text-lg font-bold text-blue-800">Dirección del Departamento</h4>
            </div>
            <div className="col-span-1">
              <label htmlFor="calle" className="block text-sm font-medium text-gray-700">Calle</label>
              <input type="text" id="calle" name="calle" value={newDepartment.calle} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" required />
            </div>
            <div className="col-span-1">
              <label htmlFor="numeroExterior" className="block text-sm font-medium text-gray-700">Número Exterior</label>
              <input type="text" id="numeroExterior" name="numeroExterior" value={newDepartment.numeroExterior} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" required />
            </div>
            <div className="col-span-1">
              <label htmlFor="numeroInterior" className="block text-sm font-medium text-gray-700">Número Interior (Opcional)</label>
              <input type="text" id="numeroInterior" name="numeroInterior" value={newDepartment.numeroInterior} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" />
            </div>
            <div className="col-span-1">
              <label htmlFor="colonia" className="block text-sm font-medium text-gray-700">Colonia</label>
              <input type="text" id="colonia" name="colonia" value={newDepartment.colonia} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" required />
            </div>
            <div className="col-span-1">
              <label htmlFor="ciudad" className="block text-sm font-medium text-gray-700">Ciudad</label>
              <input type="text" id="ciudad" name="ciudad" value={newDepartment.ciudad} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" required />
            </div>
            <div className="col-span-1">
              <label htmlFor="estadoDireccion" className="block text-sm font-medium text-gray-700">Estado</label>
              <input type="text" id="estadoDireccion" name="estadoDireccion" value={newDepartment.estadoDireccion} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" required />
            </div>
            <div className="col-span-1">
              <label htmlFor="codigoPostal" className="block text-sm font-medium text-gray-700">Código Postal</label>
              <input type="text" id="codigoPostal" name="codigoPostal" value={newDepartment.codigoPostal} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" required maxLength="5" />
            </div>


            <div className="col-span-full flex justify-end space-x-3 mt-4">
              <button
                type="submit"
                className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition duration-150 ease-in-out"
              >
                {isEditing ? 'Actualizar Departamento' : 'Añadir Departamento'}
              </button>
              {isEditing && (
                <button
                  type="button"
                  onClick={() => {
                    setIsEditing(false);
                    setCurrentDepartmentId(null);
                    setNewDepartment({
                      numeroDepartamento: '',
                      rentaMensual: '',
                      deposito: '',
                      ocupantesMaximos: '',
                      cargoAdicionalOcupanteExtra: '',
                      descripcion: '',
                      estado: 'activo',
                      calle: '', numeroExterior: '', numeroInterior: '', colonia: '', ciudad: '', estadoDireccion: '', codigoPostal: ''
                    });
                  }}
                  className="px-6 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50 transition duration-150 ease-in-out"
                >
                  Cancelar Edición
                </button>
              )}
            </div>
          </form>
        </div>
      )}

      {(activeSubSection === 'available' || activeSubSection === 'occupied' || activeSubSection === null) && (
        <div className="mt-8">
          <h3 className="text-xl font-semibold text-gray-700 mb-3">
            {activeSubSection === 'available' ? 'Departamentos Disponibles' : activeSubSection === 'occupied' ? 'Departamentos Ocupados' : 'Todos los Departamentos'}
          </h3>
          {loadingDepartments || loadingArrendatarios ? (
            <p className="text-gray-600">Cargando departamentos...</p>
          ) : filteredDepartments.length === 0 ? (
            <p className="text-gray-600">No hay departamentos para mostrar en esta categoría.</p>
          ) : (
            <>
              {(activeSubSection === 'available' || activeSubSection === 'occupied' || activeSubSection === null) && (
                <div className="mb-4 text-right space-x-2">
                  {/* Print button for lists, enabled only if there are departments to print */}
                  <button
                    onClick={handlePrintList}
                    className="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-opacity-50 transition duration-150 ease-in-out"
                    disabled={filteredDepartments.length === 0}
                  >
                    🖨️ Imprimir Lista (Navegador)
                  </button>
                  {/* Download PDF button for lists, enabled only if there are departments to print */}
                  <button
                    onClick={handleDownloadListPdf}
                    className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50 transition duration-150 ease-in-out"
                    disabled={filteredDepartments.length === 0}
                  >
                    ⬇️ Descargar Lista PDF
                  </button>
                </div>
              )}
              <div ref={listRef} className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {filteredDepartments.map((department) => (
                  <div key={department.id} className="bg-white border border-gray-200 rounded-lg shadow-sm p-4 flex flex-col justify-between">
                    <div>
                      <h4 className="text-lg font-bold text-blue-800 mb-2">Departamento #{department.numeroDepartamento}</h4>
                      <p className="text-gray-700 text-sm">Renta: ${department.rentaMensual.toFixed(2)}</p>
                      <p className="text-700 text-sm">Depósito: ${department.deposito.toFixed(2)}</p>
                      <p className="text-gray-700 text-sm">Ocupantes Máximos: {department.ocupantesMaximos}</p>
                      <p className="text-gray-700 text-sm">Cargo Extra: ${department.cargoAdicionalOcupanteExtra.toFixed(2)}</p>
                      <p className="text-gray-700 text-sm">Descripción: {department.descripcion}</p>
                      <p className="text-gray-700 text-sm">Estado: <span className={`font-semibold ${department.estado === 'activo' ? 'text-green-600' : department.estado === 'inactivo' ? 'text-red-600' : 'text-yellow-600'}`}>{department.estado.charAt(0).toUpperCase() + department.estado.slice(1)}</span></p>
                      <p className="text-gray-700 text-sm">Ocupación Actual: {getOccupancyCount(department.numeroDepartamento)}</p>
                      <p className="text-gray-700 text-sm mt-2">
                        Dirección: {department.calle} #${department.numeroExterior}
                        {department.numeroInterior && ` Int. ${department.numeroInterior}`}, {department.colonia}, {department.ciudad}, {department.estadoDireccion} C.P. {department.codigoPostal}
                      </p>
                    </div>
                    <div className="mt-4 flex space-x-2">
                      <button
                        onClick={() => handleEditDepartment(department)}
                        className="px-4 py-2 bg-yellow-500 text-white rounded-md hover:bg-yellow-600 text-sm transition duration-150 ease-in-out"
                      >
                        Editar
                      </button>
                      <button
                        onClick={() => handleDeleteDepartment(department.id)}
                        className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 text-sm transition duration-150 ease-in-out"
                      >
                        Eliminar
                      </button>
                      {/* Print button for individual department, always enabled if department exists */}
                      <button
                        onClick={() => handlePrintDepartment(department)}
                        className="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 text-sm transition duration-150 ease-in-out"
                      >
                        🖨️ Imprimir
                      </button>
                      {/* Download PDF button for individual department, always enabled if department exists */}
                      <button
                        onClick={() => handleDownloadDepartmentPdf(department)}
                        className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 text-sm transition duration-150 ease-in-out"
                      >
                        ⬇️ PDF
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </>
          )}
        </div>
      )}
      {activeSubSection === null && (
        <p className="text-gray-700">Selecciona una opción del submenú de Departamentos para ver la lista.</p>
      )}
    </SectionCard>
  );
};

const ArrendatariosSection = ({ activeSubSection, setActiveSubSection }) => {
  const { db, userId, showModal } = useContext(FirebaseContext);
  const [newTenant, setNewTenant] = useState({
    nombre: '',
    apellido: '',
    telefono: '',
    email: '',
    departamentoAsignado: '',
    fechaInicioContrato: '',
    fechaFinContrato: '',
    fechaIngreso: '', // Used for numeroControl auto-generation
    fechaRealIngreso: '', // NEW: For reference/reports
    numeroControl: '', // Será autogenerado
    rfc: '',
    curp: '',
    fechaNacimiento: '',
    lugarNacimiento: '',
    empresaTrabajo: '',
    identificacion: '', // Ahora es un select
    identificacionNumero: '', // Nuevo campo para el número de identificación
    referencia1Nombre: '',
    referencia1Telefono: '',
    referencia2Nombre: '',
    referencia2Telefono: '',
    numeroOcupantes: '',
    rentaMensualBase: '', // Ahora se auto-rellena
    depositoBase: '',    // Ahora se auto-rellena
    estadoDeposito: 'pendiente', // NEW: Estado del depósito
    cargoOcupanteExtra: '', // Ahora se auto-rellena
    pagoTotalRentaMensual: 0, // Campo calculado
    comentarios: '',
    estado: 'activo', // Estado inicial
    diaPagoRenta: '' // NUEVO CAMPO: Día de pago de la renta
  });
  const [tenants, setTenants] = useState([]);
  const [departments, setDepartments] = useState([]); // Para poblar el dropdown de departamentos
  const [loadingTenants, setLoadingTenants] = useState(true);
  const [loadingDepartments, setLoadingDepartments] = useState(true);
  const [isEditing, setIsEditing] = useState(false);
  const [currentTenantId, setCurrentTenantId] = useState(null);
  const [selectedTenantForDetails, setSelectedTenantForDetails] = useState(null); // Nuevo estado para detalles de arrendatario

  const tenantListRef = useRef(null); // Ref for the tenant list table for PDF generation
  const tenantDetailsRef = useRef(null); // Ref for the individual tenant details for PDF generation

  // Cargar arrendatarios en tiempo real
  useEffect(() => {
    if (!db || !userId) return;

    const tenantsColRef = collection(db, `artifacts/${__app_id}/users/${userId}/arrendatarios`);
    const unsubscribe = onSnapshot(tenantsColRef, (snapshot) => {
      const tenantsList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setTenants(tenantsList);
      setLoadingTenants(false);
      // Si el arrendatario seleccionado para detalles ya no existe, resetearlo
      if (selectedTenantForDetails && !tenantsList.some(t => t.id === selectedTenantForDetails.id)) {
        setSelectedTenantForDetails(null);
      }
    }, (error) => {
      console.error("Error al cargar arrendatarios:", error);
      showModal("Error de Carga", `No se pudieron cargar los arrendatarios: ${error.message}`);
      setLoadingTenants(false);
    });

    return () => unsubscribe();
  }, [db, userId, showModal, selectedTenantForDetails]); // Added selectedTenantForDetails to dependencies

  // Cargar departamentos para dropdown
  useEffect(() => {
    if (!db || !userId) return;

    const departmentsColRef = collection(db, `artifacts/${__app_id}/users/${userId}/departamentos`);
    const unsubscribe = onSnapshot(departmentsColRef, (snapshot) => {
      const departmentsList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setDepartments(departmentsList);
      setLoadingDepartments(false);
    }, (error) => {
      console.error("Error al cargar departamentos para el dropdown:", error);
      showModal("Error de Carga", `No se pudieron cargar los departamentos para asignar: ${error.message}`);
      setLoadingDepartments(false);
    });

    return () => unsubscribe();
  }, [db, userId, showModal]);

  // Efecto para auto-rellenar renta, depósito y cargo extra del departamento
  useEffect(() => {
    if (newTenant.departamentoAsignado && departments.length > 0) {
      const selectedDept = departments.find(dept => dept.numeroDepartamento === newTenant.departamentoAsignado);
      if (selectedDept) {
        setNewTenant(prev => ({
          ...prev,
          rentaMensualBase: selectedDept.rentaMensual.toString(),
          depositoBase: selectedDept.deposito.toString(),
          cargoOcupanteExtra: selectedDept.cargoAdicionalOcupanteExtra.toString(),
        }));
      }
    } else if (!isEditing) { // Limpiar si no hay departamento seleccionado y no estamos editando
      setNewTenant(prev => ({
        ...prev,
        rentaMensualBase: '',
        depositoBase: '',
        cargoOcupanteExtra: '',
      }));
    }
  }, [newTenant.departamentoAsignado, departments, isEditing]);


  // Efecto para calcular pagoTotalRentaMensual
  useEffect(() => {
    const calculateTotalRent = () => {
      const baseRent = parseFloat(newTenant.rentaMensualBase) || 0;
      const extraCharge = parseFloat(newTenant.cargoOcupanteExtra) || 0;
      const numOccupants = parseInt(newTenant.numeroOcupantes) || 0;
      const assignedDept = departments.find(d => d.numeroDepartamento === newTenant.departamentoAsignado);
      const maxOccupants = assignedDept ? assignedDept.ocupantesMaximos : 0;

      let totalRent = baseRent;
      if (numOccupants > maxOccupants) {
        totalRent += (numOccupants - maxOccupants) * extraCharge;
      }
      setNewTenant(prev => ({ ...prev, pagoTotalRentaMensual: totalRent }));
    };

    calculateTotalRent();
  }, [newTenant.rentaMensualBase, newTenant.cargoOcupanteExtra, newTenant.numeroOcupantes, newTenant.departamentoAsignado, departments]);

  // Efecto para autogenerar numeroControl y diaPagoRenta
  useEffect(() => {
    if (newTenant.fechaIngreso && newTenant.departamentoAsignado) {
      // Parse the date string as a local date to avoid timezone issues
      const [year, month, day] = newTenant.fechaIngreso.split('-').map(Number);
      const entryDate = new Date(year, month - 1, day); // Month is 0-indexed

      const dayOfMonth = entryDate.getDate(); // Get the day of the month from the local date
      const monthFormatted = (entryDate.getMonth() + 1).toString().padStart(2, '0');
      const yearFormatted = entryDate.getFullYear().toString().slice(-2);
      const departmentNum = newTenant.departamentoAsignado;

      setNewTenant(prev => ({
        ...prev,
        numeroControl: `${dayOfMonth.toString().padStart(2, '0')}${monthFormatted}${yearFormatted}${departmentNum}`,
        diaPagoRenta: dayOfMonth.toString() // Auto-rellenar día de pago con el día de la fecha de ingreso
      }));
    } else if (!isEditing) { // Solo limpiar si no está editando y los campos están vacíos
      setNewTenant(prev => ({ ...prev, numeroControl: '', diaPagoRenta: '' }));
    }
  }, [newTenant.fechaIngreso, newTenant.departamentoAsignado, isEditing]);


  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;

    if (type === 'checkbox' && name === 'marcarDepositoPagado') {
      setNewTenant(prev => ({
        ...prev,
        estadoDeposito: checked ? 'pagado' : 'pendiente' // Set to 'pagado' if checked, else 'pendiente'
      }));
    }
    // Validar que los campos numéricos solo acepten números
    else if (['numeroOcupantes'].includes(name)) { // Only numeroOcupantes should be strictly numeric
      if (value === '' || /^\d*$/.test(value)) { // Allows empty string or integers
        setNewTenant(prev => ({ ...prev, [name]: value }));
      }
    } else if (['telefono', 'referencia1Telefono', 'referencia2Telefono'].includes(name)) {
      // Allow digits, parentheses, hyphens, and spaces for phone numbers
      // This regex allows for (XXX) XXX-XXXX format, and ensures 10 digits are present
      const cleanedValue = value.replace(/\D/g, ''); // Remove all non-digits for length check
      if (cleanedValue.length <= 10) { // Limit input to 10 digits
        // Format as (XXX) XXX-XXXX as user types
        let formattedValue = cleanedValue;
        if (cleanedValue.length > 0) {
          formattedValue = `(${cleanedValue.substring(0, 3)}`;
        }
        if (cleanedValue.length > 3) {
          formattedValue += `) ${cleanedValue.substring(3, 6)}`;
        }
        if (cleanedValue.length > 6) {
          formattedValue += `-${cleanedValue.substring(6, 10)}`;
        }
        setNewTenant(prev => ({ ...prev, [name]: formattedValue }));
      }
    }
    else {
      setNewTenant(prev => ({ ...prev, [name]: value }));
    }
  };

  const validateForm = () => {
    const {
      nombre, apellido, telefono, email, departamentoAsignado,
      fechaInicioContrato, fechaFinContrato, fechaIngreso, fechaRealIngreso, numeroControl,
      rfc, curp, fechaNacimiento, lugarNacimiento, empresaTrabajo,
      identificacion, identificacionNumero,
      referencia1Nombre, referencia1Telefono, referencia2Nombre, referencia2Telefono,
      numeroOcupantes, rentaMensualBase, depositoBase, cargoOcupanteExtra, comentarios,
      diaPagoRenta, estadoDeposito
    } = newTenant;

    // Campos obligatorios según las nuevas reglas
    if (!nombre || !apellido) {
      showModal("Error de Validación", "El Nombre y Apellido del arrendatario son obligatorios.");
      return false;
    }
    if (!departamentoAsignado) {
      showModal("Error de Validación", "El Número de Departamento es obligatorio.");
      return false;
    }
    if (!fechaIngreso) {
      showModal("Error de Validación", "La Fecha de Ingreso es obligatoria.");
      return false;
    }
    if (!fechaInicioContrato || !fechaFinContrato) {
      showModal("Error de Validación", "La Fecha de Inicio y Fin de Contrato son obligatorias.");
      return false;
    }
    if (!numeroOcupantes) {
      showModal("Error de Validación", "El Número de Ocupantes es obligatorio.");
      return false;
    }

    // RFC y CURP: Al menos uno debe estar presente
    if (!rfc && !curp) {
      showModal("Error de Validación", "Debe proporcionar al menos el RFC o el CURP.");
      return false;
    }

    // Validaciones de formato y tipo de teléfono
    const phoneRegex = /^\(\d{3}\)\s?\d{3}-\d{4}$/; // Matches (XXX) XXX-XXXX or (XXX)XXX-XXXX

    if (telefono && !phoneRegex.test(telefono)) {
      showModal("Error de Validación", "El número de Teléfono Arrendatario debe tener 10 dígitos y el formato (XXX) XXX-XXXX.");
      return false;
    }
    if (referencia1Telefono && !phoneRegex.test(referencia1Telefono)) {
        showModal("Error de Validación", "El Teléfono de Referencia 1 debe tener 10 dígitos y el formato (XXX) XXX-XXXX.");
        return false;
    }
    if (referencia2Telefono && !phoneRegex.test(referencia2Telefono)) {
        showModal("Error de Validación", "El Teléfono de Referencia 2 debe tener 10 dígitos y el formato (XXX) XXX-XXXX.");
        return false;
    }


    if (email && !/\S+@\S+\.\S+/.test(email)) {
      showModal("Error de Validación", "El formato del correo electrónico no es válido.");
      return false;
    }
    if (isNaN(parseInt(numeroOcupantes)) || parseInt(numeroOcupantes) < 0) {
      showModal("Error de Validación", "El número de ocupantes debe ser un número entero no negativo.");
      return false;
    }
    // Estas validaciones ahora se aplican a los valores auto-rellenados
    if (isNaN(parseFloat(rentaMensualBase)) || parseFloat(rentaMensualBase) < 0 ||
        isNaN(parseFloat(depositoBase)) || parseFloat(depositoBase) < 0 ||
        isNaN(parseFloat(cargoOcupanteExtra)) || parseFloat(cargoOcupanteExtra) < 0) {
      showModal("Error de Validación", "Los campos de renta base, depósito base y cargo extra deben ser números válidos no negativos.");
      return false;
    }
    // diaPagoRenta es automático, no necesita validación de rango aquí, solo de presencia
    if (diaPagoRenta === '') {
      showModal("Error de Validación", "El día de pago de la renta no puede estar vacío.");
      return false;
    }

    // Validaciones de fechas
    const startDate = new Date(fechaInicioContrato);
    const endDate = new Date(fechaFinContrato);
    const entryDate = new Date(fechaIngreso);
    const realEntryDate = fechaRealIngreso ? new Date(fechaRealIngreso) : null;
    
    if (startDate > endDate) {
      showModal("Error de Validación", "La fecha de inicio del contrato no puede ser posterior a la fecha de fin.");
      return false;
    }
    if (entryDate > new Date()) {
      showModal("Error de Validación", "La fecha de ingreso no puede ser en el futuro.");
      return false;
    }
    if (realEntryDate && realEntryDate > new Date()) {
      showModal("Error de Validación", "La fecha real de ingreso no puede ser en el futuro.");
      return false;
    }

    // NUEVA VALIDACIÓN: Fecha de Nacimiento (obligatoria y mayor de 18 años)
    if (!fechaNacimiento) {
      showModal("Error de Validación", "La Fecha de Nacimiento es obligatoria.");
      return false;
    }
    const birthDate = new Date(fechaNacimiento);
    const today = new Date();
    let age = today.getFullYear() - birthDate.getFullYear();
    const m = today.getMonth() - birthDate.getMonth();
    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
      age--;
    }
    if (age < 18) {
      showModal("Error de Validación", "El arrendatario debe ser mayor de 18 años.");
      return false;
    }

    return true;
  };

  const handleAddOrUpdateTenant = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    if (!db || !userId) {
      showModal("Error", "Base de datos no disponible.");
      return;
    }

    try {
      const tenantsColRef = collection(db, `artifacts/${__app_id}/users/${userId}/arrendatarios`);

      // Verificar si el departamento asignado ya está ocupado por otro arrendatario activo
      const departmentOccupied = tenants.some(
        tenant => tenant.departamentoAsignado === newTenant.departamentoAsignado &&
                  tenant.estado === 'activo' &&
                  (!isEditing || tenant.id !== currentTenantId) // Excluir arrendatario actual si está editando
      );

      if (departmentOccupied && newTenant.estado === 'activo') {
        showModal("Error de Asignación", `El departamento ${newTenant.departamentoAsignado} ya está ocupado por otro arrendatario activo. Por favor, selecciona un departamento diferente.`);
        return;
      }

      // Verificar unicidad del arrendatario por CURP o RFC si se está añadiendo uno nuevo
      if (!isEditing) {
        let duplicateFound = false;
        if (newTenant.curp) {
          const qCurp = query(tenantsColRef, where("curp", "==", newTenant.curp));
          const curpSnapshot = await getDocs(qCurp);
          if (!curpSnapshot.empty) {
            showModal("Error de Creación", `Ya existe un arrendatario con el CURP ${newTenant.curp}.`);
            duplicateFound = true;
          }
        }
        if (!duplicateFound && newTenant.rfc) {
          const qRfc = query(tenantsColRef, where("rfc", "==", newTenant.rfc));
          const rfcSnapshot = await getDocs(qRfc);
          if (!rfcSnapshot.empty) {
            showModal("Error de Creación", `Ya existe un arrendatario con el RFC ${newTenant.rfc}.`);
            duplicateFound = true;
          }
        }
        if (duplicateFound) {
          return; // Detener la ejecución si se encontró un duplicado
        }
      }

      const tenantToSave = {
        ...newTenant,
        fechaInicioContrato: Timestamp.fromDate(new Date(newTenant.fechaInicioContrato)),
        fechaFinContrato: Timestamp.fromDate(new Date(newTenant.fechaFinContrato)),
        fechaIngreso: Timestamp.fromDate(new Date(newTenant.fechaIngreso)),
        fechaRealIngreso: newTenant.fechaRealIngreso ? Timestamp.fromDate(new Date(newTenant.fechaRealIngreso)) : null, // Save as Timestamp or null
        fechaNacimiento: Timestamp.fromDate(new Date(newTenant.fechaNacimiento)), // Ahora es obligatorio
        numeroOcupantes: parseInt(newTenant.numeroOcupantes),
        rentaMensualBase: parseFloat(newTenant.rentaMensualBase),
        depositoBase: parseFloat(newTenant.depositoBase),
        cargoOcupanteExtra: parseFloat(newTenant.cargoOcupanteExtra),
        diaPagoRenta: parseInt(newTenant.diaPagoRenta), // Guardar como número
        // pagoTotalRentaMensual se recalcula al cargar y al cambiar campos, no se guarda como input directo
      };

      if (isEditing) {
        const docRef = doc(db, `artifacts/${__app_id}/users/${userId}/arrendatarios`, currentTenantId);
        await setDoc(docRef, { ...tenantToSave, updatedAt: Timestamp.now() }, { merge: true });
        showModal("Éxito", "Arrendatario actualizado correctamente.");
        setIsEditing(false);
        setCurrentTenantId(null);
      } else {
        await addDoc(tenantsColRef, { ...tenantToSave, createdAt: Timestamp.now() });
        showModal("Éxito", "Arrendatario añadido correctamente.");
      }
      // Limpiar el formulario después de añadir o actualizar con éxito
      setNewTenant({
        nombre: '',
        apellido: '',
        telefono: '',
        email: '',
        departamentoAsignado: '',
        fechaInicioContrato: '',
        fechaFinContrato: '',
        fechaIngreso: '',
        fechaRealIngreso: '', // Reset new field
        numeroControl: '', // Reset auto-generated field
        rfc: '',
        curp: '',
        fechaNacimiento: '',
        lugarNacimiento: '',
        empresaTrabajo: '',
        identificacion: '',
        identificacionNumero: '',
        referencia1Nombre: '',
        referencia1Telefono: '',
        referencia2Nombre: '',
        referencia2Telefono: '',
        numeroOcupantes: '',
        rentaMensualBase: '',
        depositoBase: '',
        estadoDeposito: 'pendiente', // Reset new field
        cargoOcupanteExtra: '',
        pagoTotalRentaMensual: 0,
        comentarios: '',
        estado: 'activo',
        diaPagoRenta: '' // Reset
      });
    } catch (error) {
      console.error("Error al añadir/actualizar arrendatario:", error);
      showModal("Error", `No se pudo guardar el arrendatario: ${error.message}`);
    }
  };

  const handleEditTenant = (tenant) => {
    setNewTenant({
      nombre: tenant.nombre,
      apellido: tenant.apellido,
      telefono: tenant.telefono,
      email: tenant.email,
      departamentoAsignado: tenant.departamentoAsignado,
      fechaInicioContrato: tenant.fechaInicioContrato.toDate().toISOString().split('T')[0], // Convertir Timestamp a ISO para input date
      fechaFinContrato: tenant.fechaFinContrato.toDate().toISOString().split('T')[0],     // Convertir Timestamp a ISO para input date
      fechaIngreso: tenant.fechaIngreso.toDate().toISOString().split('T')[0],
      fechaRealIngreso: tenant.fechaRealIngreso ? tenant.fechaRealIngreso.toDate().toISOString().split('T')[0] : '', // Load new field
      numeroControl: tenant.numeroControl, // Mantener el número autogenerado existente
      rfc: tenant.rfc,
      curp: tenant.curp,
      fechaNacimiento: tenant.fechaNacimiento ? tenant.fechaNacimiento.toDate().toISOString().split('T')[0] : '', // Manejar null
      lugarNacimiento: tenant.lugarNacimiento,
      empresaTrabajo: tenant.empresaTrabajo,
      identificacion: tenant.identificacion || '', // Asegurarse de que no sea undefined
      identificacionNumero: tenant.identificacionNumero || '', // Cargar el número de identificación
      referencia1Nombre: tenant.referencia1Nombre,
      referencia1Telefono: tenant.referencia1Telefono,
      referencia2Nombre: tenant.referencia2Nombre,
      referencia2Telefono: tenant.referencia2Telefono,
      numeroOcupantes: tenant.numeroOcupantes.toString(), // Convertir a string para el campo de entrada
      rentaMensualBase: tenant.rentaMensualBase.toString(), // Cargar valores existentes
      depositoBase: tenant.depositoBase.toString(),       // Cargar valores existentes
      estadoDeposito: tenant.estadoDeposito || 'pendiente', // Load new field, default to 'pendiente'
      cargoOcupanteExtra: tenant.cargoOcupanteExtra.toString(), // Cargar valores existentes
      pagoTotalRentaMensual: tenant.pagoTotalRentaMensual, // Se recalculará de todas formas, pero mantiene el valor
      comentarios: tenant.comentarios,
      estado: tenant.estado,
      diaPagoRenta: tenant.diaPagoRenta.toString() // Cargar el día de pago de la renta
    });
    setIsEditing(true);
    setCurrentTenantId(tenant.id);
    setActiveSubSection('new'); // Cambiar a la vista del formulario para editar
  };

  const handleDeleteTenant = (tenantId) => {
    showModal("Confirmar Eliminación", "¿Estás seguro de que quieres eliminar este arrendatario? Esta acción no se puede deshacer.", async () => {
      if (!db || !userId) {
        showModal("Error", "Base de datos no disponible.");
        return;
      }
      try {
        const docRef = doc(db, `artifacts/${__app_id}/users/${userId}/arrendatarios`, tenantId);
        await deleteDoc(docRef);
        showModal("Éxito", "Arrendatario eliminado correctamente.");
      } catch (error) {
        console.error("Error al eliminar arrendatario:", error);
        showModal("Error", `No se pudo eliminar el arrendatario: ${error.message}`);
      }
    });
  };

  const filteredTenants = tenants.filter(tenant => {
    if (activeSubSection === 'active') {
      return tenant.estado === 'activo';
    } else if (activeSubSection === 'inactive') {
      return tenant.estado === 'inactivo';
    }
    return true; // 'all' o 'new' o 'details'
  });

  // Filtrar departamentos disponibles para la asignación
  const availableDepartments = departments.filter(dept => {
    // Un departamento está disponible si no hay ningún arrendatario activo asignado a él
    // O si el departamento es el que actualmente está asignado al arrendatario que se está editando
    return !tenants.some(tenant => tenant.departamentoAsignado === dept.numeroDepartamento && tenant.estado === 'activo' && (!isEditing || tenant.id !== currentTenantId));
  });

  // Function to generate HTML for the tenant list table for printing/PDF
  const generateTenantListHtml = (tenantsToPrint, listType) => {
    return `
      <div style="font-family: Arial, sans-serif; padding: 20px;">
        <h1 style="text-align: center; color: #1e40af;">LISTA DE ARRENDATARIOS ${listType.toUpperCase()}</h1>
        <p style="text-align: center; color: #6b7280;">Fecha de Reporte: ${new Date().toLocaleDateString()}</p>
        <br/>
        <table style="width: 100%; border-collapse: collapse;">
          <thead>
            <tr style="background-color: #eff6ff;">
              <th style="border: 1px solid #d1d5db; padding: 8px; text-align: left;">Nombre</th>
              <th style="border: 1px solid #d1d5db; padding: 8px; text-align: left;">Departamento</th>
              <th style="border: 1px solid #d1d5db; padding: 8px; text-align: left;">Teléfono</th>
              <th style="border: 1px solid #d1d5db; padding: 8px; text-align: left;">Email</th>
              <th style="border: 1px solid #d1d5db; padding: 8px; text-align: left;">Inicio Contrato</th>
              <th style="border: 1px solid #d1d5db; padding: 8px; text-align: left;">Fin Contrato</th>
              <th style="border: 1px solid #d1d5db; padding: 8px; text-align: right;">Pago Total ($)</th>
              <th style="border: 1px solid #d1d5db; padding: 8px; text-align: left;">Estado</th>
            </tr>
          </thead>
          <tbody>
            ${tenantsToPrint.map(tenant => `
              <tr>
                <td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.nombre} ${tenant.apellido}</td>
                <td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.departamentoAsignado}</td>
                <td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.telefono || 'N/A'}</td>
                <td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.email || 'N/A'}</td>
                <td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.fechaInicioContrato ? tenant.fechaInicioContrato.toDate().toLocaleDateString() : 'N/A'}</td>
                <td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.fechaFinContrato ? tenant.fechaFinContrato.toDate().toLocaleDateString() : 'N/A'}</td>
                <td style="border: 1px solid #d1d5db; padding: 8px; text-align: right;">${tenant.pagoTotalRentaMensual ? tenant.pagoTotalRentaMensual.toFixed(2) : '0.00'}</td>
                <td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.estado.charAt(0).toUpperCase() + tenant.estado.slice(1)}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    `;
  };

  // Function to print the filtered tenant list (uses window.print())
  const handlePrintTenantList = () => {
    let listType = '';
    if (activeSubSection === 'active') {
      listType = 'Activos';
    } else if (activeSubSection === 'inactive') {
      listType = 'Inactivos';
    } else {
      listType = 'Todos';
    }
    const htmlContent = generateTenantListHtml(filteredTenants, listType);
    printHtmlContent(htmlContent, `Lista de Arrendatarios ${listType}`);
    showModal("Impresión Iniciada", `Se ha iniciado la impresión de la lista de Arrendatarios ${listType}.`);
  };

  // Function to download the PDF of the filtered tenant list (uses html2pdf.js)
  const handleDownloadTenantListPdf = () => {
    if (typeof window.html2pdf === 'undefined') {
      showModal("Error", "La librería de PDF no se ha cargado correctamente. Por favor, recargue la página.");
      return;
    }
    let listType = '';
    if (activeSubSection === 'active') {
      listType = 'Activos';
    } else if (activeSubSection === 'inactive') {
      listType = 'Inactivos';
    } else {
      listType = 'Todos';
    }
    const htmlContent = generateTenantListHtml(filteredTenants, listType);
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = htmlContent;

    window.html2pdf().from(tempDiv).set({
      margin: 1,
      filename: `Lista_Arrendatarios_${listType}.pdf`,
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2 },
      jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
    }).save();
    showModal("PDF Generado", `La lista de Arrendatarios ${listType} ha sido generada como PDF y se ha iniciado la descarga.`);
  };

  // Function to generate HTML for individual tenant details for printing/PDF
  const generateTenantDetailsHtml = (tenant) => {
    if (!tenant) return '';
    return `
      <div style="font-family: Arial, sans-serif; padding: 20px;">
        <h1 style="text-align: center; color: #1e40af;">DETALLES DEL ARRENDATARIO</h1>
        <h2 style="text-align: center; color: #3b82f6;">${tenant.nombre} ${tenant.apellido}</h2>
        <br/>
        <table style="width: 100%; border-collapse: collapse; margin-top: 20px;">
          <thead>
            <tr style="background-color: #eff6ff;">
              <th style="border: 1px solid #d1d5db; padding: 8px; text-align: left; width: 40%;">Campo</th>
              <th style="border: 1px solid #d1d5db; padding: 8px; text-align: left; width: 60%;">Valor</th>
            </tr>
          </thead>
          <tbody>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">Departamento Asignado:</td><td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.departamentoAsignado || 'N/A'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">Número de Control:</td><td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.numeroControl || 'N/A'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">Fecha de Ingreso (Contrato):</td><td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.fechaIngreso ? tenant.fechaIngreso.toDate().toLocaleDateString() : 'N/A'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">Fecha Real de Ingreso:</td><td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.fechaRealIngreso ? tenant.fechaRealIngreso.toDate().toLocaleDateString() : 'N/A'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">Teléfono:</td><td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.telefono || 'N/A'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">Email:</td><td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.email || 'N/A'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">RFC:</td><td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.rfc || 'N/A'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">CURP:</td><td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.curp || 'N/A'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">Fecha de Nacimiento:</td><td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.fechaNacimiento ? tenant.fechaNacimiento.toDate().toLocaleDateString() : 'N/A'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">Lugar de Nacimiento:</td><td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.lugarNacimiento || 'N/A'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">Empresa de Trabajo:</td><td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.empresaTrabajo || 'N/A'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">Tipo de Identificación:</td><td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.identificacion || 'N/A'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">Número de Identificación:</td><td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.identificacionNumero || 'N/A'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">Referencia 1 Nombre:</td><td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.referencia1Nombre || 'N/A'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">Referencia 1 Teléfono:</td><td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.referencia1Telefono || 'N/A'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">Referencia 2 Nombre:</td><td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.referencia2Nombre || 'N/A'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">Referencia 2 Teléfono:</td><td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.referencia2Telefono || 'N/A'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">Número de Ocupantes:</td><td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.numeroOcupantes || 'N/A'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">Renta Mensual Base:</td><td style="border: 1px solid #d1d5db; padding: 8px;">$${tenant.rentaMensualBase ? tenant.rentaMensualBase.toFixed(2) : '0.00'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">Depósito Base:</td><td style="border: 1px solid #d1d5db; padding: 8px;">$${tenant.depositoBase ? tenant.depositoBase.toFixed(2) : '0.00'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">Estado del Depósito:</td><td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.estadoDeposito ? tenant.estadoDeposito.charAt(0).toUpperCase() + tenant.estadoDeposito.slice(1).replace('_', ' ') : 'N/A'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">Cargo Ocupante Extra:</td><td style="border: 1px solid #d1d5db; padding: 8px;">$${tenant.cargoOcupanteExtra ? tenant.cargoOcupanteExtra.toFixed(2) : '0.00'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">Pago Total Renta Mensual:</td><td style="border: 1px solid #d1d5db; padding: 8px;">$${tenant.pagoTotalRentaMensual ? tenant.pagoTotalRentaMensual.toFixed(2) : '0.00'}</td></tr>
            <tr><td style="border: 1px solid #d1d5db; padding: 8px; font-weight: bold;">Comentarios:</td><td style="border: 1px solid #d1d5db; padding: 8px;">${tenant.comentarios || 'N/A'}</td></tr>
          </tbody>
        </table>
      </div>
    `;
  };

  // Function to print individual tenant details
  const handlePrintTenantDetails = () => {
    if (!selectedTenantForDetails) {
      showModal("Error", "Por favor, selecciona un arrendatario para imprimir sus detalles.");
      return;
    }
    const htmlContent = generateTenantDetailsHtml(selectedTenantForDetails);
    printHtmlContent(htmlContent, `Detalles Arrendatario ${selectedTenantForDetails.nombre} ${selectedTenantForDetails.apellido}`);
    showModal("Impresión Iniciada", `Se ha iniciado la impresión de los detalles de ${selectedTenantForDetails.nombre} ${selectedTenantForDetails.apellido}.`);
  };

  // Function to download PDF of individual tenant details
  const handleDownloadTenantDetailsPdf = () => {
    if (typeof window.html2pdf === 'undefined') {
      showModal("Error", "La librería de PDF no se ha cargado correctamente. Por favor, recargue la página.");
      return;
    }
    if (!selectedTenantForDetails) {
      showModal("Error", "Por favor, selecciona un arrendatario para generar el PDF de sus detalles.");
      return;
    }
    const htmlContent = generateTenantDetailsHtml(selectedTenantForDetails);
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = htmlContent;

    window.html2pdf().from(tempDiv).set({
      margin: 1,
      filename: `Detalles_Arrendatario_${selectedTenantForDetails.nombre.replace(/\s/g, '_')}_${selectedTenantForDetails.apellido.replace(/\s/g, '_')}.pdf`,
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2 },
      jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
    }).save();
    showModal("PDF Generado", `Los detalles de ${selectedTenantForDetails.nombre} ${selectedTenantForDetails.apellido} han sido generados como PDF y se ha iniciado la descarga.`);
  };


  return (
    <SectionCard title="Gestión de Arrendatarios">
      {activeSubSection === 'new' && (
        <div className="mb-6">
          <h3 className="text-xl font-semibold text-gray-700 mb-3">
            {isEditing ? 'Editar Arrendatario' : 'Añadir Nuevo Arrendatario'}
          </h3>
          <form onSubmit={handleAddOrUpdateTenant} className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 bg-gray-50 p-4 rounded-lg shadow-inner">

            {/* Sección: Datos de Contrato y Departamento */}
            <div className="col-span-full border-b pb-2 mb-4">
              <h4 className="text-lg font-bold text-blue-800">Datos de Contrato y Departamento</h4>
            </div>
            {/* Fecha de Ingreso (para Numero de Control) */}
            <div className="col-span-1">
              <label htmlFor="fechaIngreso" className="block text-sm font-medium text-gray-700">Fecha de Ingreso (Contrato)</label>
              <input type="date" id="fechaIngreso" name="fechaIngreso" value={newTenant.fechaIngreso} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" required />
            </div>
            {/* Fecha Real de Ingreso (para referencia) */}
            <div className="col-span-1">
              <label htmlFor="fechaRealIngreso" className="block text-sm font-medium text-gray-700">Fecha Real de Ingreso (Referencia)</label>
              <input type="date" id="fechaRealIngreso" name="fechaRealIngreso" value={newTenant.fechaRealIngreso} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" />
            </div>
            {/* Número de Departamento */}
            <div className="col-span-1">
              <label htmlFor="departamentoAsignado" className="block text-sm font-medium text-gray-700">Número de Departamento</label>
              {loadingDepartments || loadingTenants ? (
                <p className="mt-1 text-gray-600">Cargando departamentos...</p>
              ) : (
                <select
                  id="departamentoAsignado"
                  name="departamentoAsignado"
                  value={newTenant.departamentoAsignado}
                  onChange={handleChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2"
                  required
                  disabled={isEditing} // No permitir cambiar departamento si se está editando un arrendatario ya asignado
                >
                  <option value="">Selecciona un departamento</option>
                  {/* Si estamos editando y el departamento actual no está en la lista de disponibles (porque ya está ocupado por este inquilino), lo mostramos. */}
                  {isEditing && newTenant.departamentoAsignado && !availableDepartments.some(d => d.numeroDepartamento === newTenant.departamentoAsignado) && (
                    <option value={newTenant.departamentoAsignado}>{newTenant.departamentoAsignado} (Actual)</option>
                  )}
                  {availableDepartments.map(dept => (
                    <option key={dept.id} value={dept.numeroDepartamento}>
                      {dept.numeroDepartamento}
                    </option>
                  ))}
                </select>
              )}
            </div>
            {/* Número de Control (Automático) */}
            <div className="col-span-1">
              <label htmlFor="numeroControl" className="block text-sm font-medium text-gray-700">Número de Control</label>
              <input type="text" id="numeroControl" name="numeroControl" value={newTenant.numeroControl} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-gray-100 p-2" readOnly />
              <p className="text-xs text-gray-500 mt-1">Generado automáticamente de Fecha de Ingreso (DDMMYY) + Número de Departamento.</p>
            </div>

            {/* Sección: Datos Personales */}
            <div className="col-span-full border-b pb-2 mb-4 mt-6">
              <h4 className="text-lg font-bold text-blue-800">Datos Personales</h4>
            </div>
            {/* Nombre del Arrendatario */}
            <div className="col-span-1">
              <label htmlFor="nombre" className="block text-sm font-medium text-gray-700">Nombre del Arrendatario</label>
              <input type="text" id="nombre" name="nombre" value={newTenant.nombre} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" required />
            </div>
            {/* Apellidos del Arrendatario */}
            <div className="col-span-1">
              <label htmlFor="apellido" className="block text-sm font-medium text-gray-700">Apellidos del Arrendatario</label>
              <input type="text" id="apellido" name="apellido" value={newTenant.apellido} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" required />
            </div>
            {/* RFC */}
            <div className="col-span-1">
              <label htmlFor="rfc" className="block text-sm font-medium text-gray-700">RFC (Opcional si CURP está presente)</label>
              <input type="text" id="rfc" name="rfc" value={newTenant.rfc} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" />
            </div>
            {/* CURP */}
            <div className="col-span-1">
              <label htmlFor="curp" className="block text-sm font-medium text-gray-700">CURP (Opcional si RFC está presente)</label>
              <input type="text" id="curp" name="curp" value={newTenant.curp} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" />
            </div>
            {/* Fecha de Nacimiento (Ahora obligatorio) */}
            <div className="col-span-1">
              <label htmlFor="fechaNacimiento" className="block text-sm font-medium text-gray-700">Fecha de Nacimiento</label>
              <input type="date" id="fechaNacimiento" name="fechaNacimiento" value={newTenant.fechaNacimiento} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" required />
            </div>
            {/* Lugar de Nacimiento */}
            <div className="col-span-1">
              <label htmlFor="lugarNacimiento" className="block text-sm font-medium text-gray-700">Lugar de Nacimiento (Opcional)</label>
              <input type="text" id="lugarNacimiento" name="lugarNacimiento" value={newTenant.lugarNacimiento} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" />
            </div>

            {/* Sección: Datos de Contacto y Empleo */}
            <div className="col-span-full border-b pb-2 mb-4 mt-6">
              <h4 className="text-lg font-bold text-blue-800">Datos de Contacto y Empleo</h4>
            </div>
            {/* Correo Electrónico */}
            <div className="col-span-1">
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">Correo Electrónico (Opcional)</label>
              <input type="email" id="email" name="email" value={newTenant.email} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" />
            </div>
            {/* Empresa de Trabajo */}
            <div className="col-span-1">
              <label htmlFor="empresaTrabajo" className="block text-sm font-medium text-gray-700">Empresa de Trabajo (Opcional)</label>
              <input type="text" id="empresaTrabajo" name="empresaTrabajo" value={newTenant.empresaTrabajo} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" />
            </div>
            {/* Teléfono Arrendatario */}
            <div className="col-span-1">
              <label htmlFor="telefono" className="block text-sm font-medium text-gray-700">Teléfono Arrendatario (Opcional)</label>
              <input type="tel" id="telefono" name="telefono" value={newTenant.telefono} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" placeholder="(664) xxx-xxxx" />
            </div>
            {/* Identificación (Select) */}
            <div className="col-span-1">
              <label htmlFor="identificacion" className="block text-sm font-medium text-gray-700">Tipo de Identificación (Opcional)</label>
              <select
                id="identificacion"
                name="identificacion"
                value={newTenant.identificacion}
                onChange={handleChange}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2"
              >
                <option value="">Selecciona tipo</option>
                <option value="INE">INE</option>
                <option value="INM">INM</option>
                <option value="LICENCIA">LICENCIA</option>
                <option value="PASAPORTE">PASAPORTE</option>
                <option value="TRABAJO">TRABAJO</option>
              </select>
            </div>
            {/* Número de Identificación (Nuevo campo) */}
            <div className="col-span-1">
              <label htmlFor="identificacionNumero" className="block text-sm font-medium text-gray-700">Número de Identificación (Opcional)</label>
              <input
                type="text"
                id="identificacionNumero"
                name="identificacionNumero"
                value={newTenant.identificacionNumero}
                onChange={handleChange}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2"
              />
            </div>

            {/* Sección: Referencias Personales */}
            <div className="col-span-full border-b pb-2 mb-4 mt-6">
              <h4 className="text-lg font-bold text-blue-800">Referencias Personales</h4>
            </div>
            {/* Referencia 1 Nombre */}
            <div className="col-span-1">
              <label htmlFor="referencia1Nombre" className="block text-sm font-medium text-gray-700">Referencia 1 Nombre (Opcional)</label>
              <input type="text" id="referencia1Nombre" name="referencia1Nombre" value={newTenant.referencia1Nombre} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" />
            </div>
            {/* Referencia 1 Teléfono */}
            <div className="col-span-1">
              <label htmlFor="referencia1Telefono" className="block text-sm font-medium text-gray-700">Referencia 1 Teléfono (Opcional)</label>
              <input type="tel" id="referencia1Telefono" name="referencia1Telefono" value={newTenant.referencia1Telefono} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" placeholder="(664) xxx-xxxx" />
            </div>
            {/* Referencia 2 Nombre */}
            <div className="col-span-1">
              <label htmlFor="referencia2Nombre" className="block text-sm font-medium text-gray-700">Referencia 2 Nombre (Opcional)</label>
              <input type="text" id="referencia2Nombre" name="referencia2Nombre" value={newTenant.referencia2Nombre} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" />
            </div>
            {/* Referencia 2 Teléfono */}
            <div className="col-span-1">
              <label htmlFor="referencia2Telefono" className="block text-sm font-medium text-gray-700">Referencia 2 Teléfono (Opcional)</label>
              <input type="tel" id="referencia2Telefono" name="referencia2Telefono" value={newTenant.referencia2Telefono} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" placeholder="(664) xxx-xxxx" />
            </div>

            {/* Sección: Detalles de Renta */}
            <div className="col-span-full border-b pb-2 mb-4 mt-6">
              <h4 className="text-lg font-bold text-blue-800">Detalles de Renta</h4>
            </div>
            {/* Número de Ocupantes */}
            <div className="col-span-1">
              <label htmlFor="numeroOcupantes" className="block text-sm font-medium text-gray-700">Número de Ocupantes</label>
              <input type="text" id="numeroOcupantes" name="numeroOcupantes" value={newTenant.numeroOcupantes} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" required />
            </div>
            {/* Renta Mensual Base (AUTOMATICO) */}
            <div className="col-span-1">
              <label htmlFor="rentaMensualBase" className="block text-sm font-medium text-gray-700">Renta Mensual Base (Automático)</label>
              <input type="text" id="rentaMensualBase" name="rentaMensualBase" value={newTenant.rentaMensualBase} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-gray-100 p-2" readOnly />
            </div>
            {/* Depósito Base */}
            <div className="col-span-1">
              <label htmlFor="depositoBase" className="block text-sm font-medium text-gray-700">Depósito Base</label>
              <input type="text" id="depositoBase" name="depositoBase" value={newTenant.depositoBase} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-gray-100 p-2" readOnly />
            </div>
            {/* Estado del Depósito */}
            <div className="col-span-1">
              <label htmlFor="estadoDeposito" className="block text-sm font-medium text-gray-700">Estado Depósito</label>
              <select
                id="estadoDeposito"
                name="estadoDeposito"
                value={newTenant.estadoDeposito}
                onChange={handleChange}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2"
              >
                <option value="pendiente">Pendiente</option>
                <option value="pagado">Pagado</option>
                <option value="no_pagado">No Pagado</option>
              </select>
            </div>
            {/* Checkbox para Marcar como Pagado */}
            <div className="col-span-1 flex items-center mt-6">
              <input
                type="checkbox"
                id="marcarDepositoPagado"
                name="marcarDepositoPagado"
                checked={newTenant.estadoDeposito === 'pagado'}
                onChange={handleChange}
                className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              />
              <label htmlFor="marcarDepositoPagado" className="ml-2 block text-sm font-medium text-gray-700">Marcar como Pagado</label>
            </div>

            {/* Cargo Ocupante Extra (AUTOMATICO) */}
            <div className="col-span-1">
              <label htmlFor="cargoOcupanteExtra" className="block text-sm font-medium text-gray-700">Cargo Ocupante Extra (Automático)</label>
              <input type="text" id="cargoOcupanteExtra" name="cargoOcupanteExtra" value={newTenant.cargoOcupanteExtra} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-gray-100 p-2" readOnly />
            </div>
            {/* Pago Total Renta Mensual (Calculado) */}
            <div className="col-span-1">
              <label htmlFor="pagoTotalRentaMensual" className="block text-sm font-medium text-gray-700">Pago Total Renta Mensual</label>
              <input type="text" id="pagoTotalRentaMensual" name="pagoTotalRentaMensual" value={`$${newTenant.pagoTotalRentaMensual.toFixed(2)}`} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-gray-100 p-2" readOnly />
            </div>
            {/* Comentarios */}
            <div className="col-span-full">
              <label htmlFor="comentarios" className="block text-sm font-medium text-gray-700">Comentarios (Opcional)</label>
              <textarea id="comentarios" name="comentarios" value={newTenant.comentarios} onChange={handleChange} rows="3" className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2"></textarea>
            </div>

            {/* Sección: Fechas de Contrato y Estado */}
            <div className="col-span-full border-b pb-2 mb-4 mt-6">
              <h4 className="text-lg font-bold text-blue-800">Fechas de Contrato y Estado</h4>
            </div>
            {/* Fecha Inicio Contrato */}
            <div className="col-span-1">
              <label htmlFor="fechaInicioContrato" className="block text-sm font-medium text-gray-700">Fecha Inicio Contrato</label>
              <input type="date" id="fechaInicioContrato" name="fechaInicioContrato" value={newTenant.fechaInicioContrato} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" required />
            </div>
            {/* Fecha Fin Contrato */}
            <div className="col-span-1">
              <label htmlFor="fechaFinContrato" className="block text-sm font-medium text-gray-700">Fecha Fin Contrato</label>
              <input type="date" id="fechaFinContrato" name="fechaFinContrato" value={newTenant.fechaFinContrato} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" required />
            </div>
            {/* Día de Pago de la Renta */}
            <div className="col-span-1">
              <label htmlFor="diaPagoRenta" className="block text-sm font-medium text-gray-700">Día de Pago de la Renta (Automático)</label>
              <input type="number" id="diaPagoRenta" name="diaPagoRenta" value={newTenant.diaPagoRenta} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-gray-100 p-2" readOnly />
              <p className="text-xs text-gray-500 mt-1">Generado automáticamente del día de la Fecha de Ingreso.</p>
            </div>
            {/* Estado */}
            <div className="col-span-1">
              <label htmlFor="estado" className="block text-sm font-medium text-gray-700">Estado</label>
              <select
                id="estado"
                name="estado"
                value={newTenant.estado}
                onChange={handleChange}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2"
                required
              >
                <option value="activo">Activo</option>
                <option value="bajaTemporal">Baja Temporal</option>
                <option value="definitiva">Definitiva</option>
              </select>
            </div>

            <div className="col-span-full flex justify-end space-x-3 mt-4">
              <button
                type="submit"
                className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition duration-150 ease-in-out"
              >
                {isEditing ? 'Actualizar Arrendatario' : 'Añadir Arrendatario'}
              </button>
              {isEditing && (
                <button
                  type="button"
                  onClick={() => {
                    setIsEditing(false);
                    setCurrentTenantId(null);
                    setNewTenant({
                      nombre: '', apellido: '', telefono: '', email: '', departamentoAsignado: '',
                      fechaInicioContrato: '', fechaFinContrato: '', fechaIngreso: '', fechaRealIngreso: '', numeroControl: '',
                      rfc: '', curp: '', fechaNacimiento: '', lugarNacimiento: '', empresaTrabajo: '',
                      identificacion: '', identificacionNumero: '',
                      referencia1Nombre: '', referencia1Telefono: '', referencia2Nombre: '', referencia2Telefono: '',
                      numeroOcupantes: '', rentaMensualBase: '', depositoBase: '', estadoDeposito: 'pendiente', cargoOcupanteExtra: '',
                      pagoTotalRentaMensual: 0, comentarios: '', estado: 'activo', diaPagoRenta: ''
                    });
                  }}
                  className="px-6 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50 transition duration-150 ease-in-out"
                >
                  Cancelar Edición
                </button>
              )}
            </div>
          </form>
        </div>
      )}

      {(activeSubSection === 'all' || activeSubSection === 'active' || activeSubSection === 'inactive' || activeSubSection === null) && activeSubSection !== 'new' && activeSubSection !== 'details' && (
        <div className="mt-8">
          <h3 className="text-xl font-semibold text-gray-700 mb-3">
            {activeSubSection === 'all' ? 'Lista de Arrendatarios' : // Changed label here
             activeSubSection === 'active' ? 'Arrendatarios Activos' :
             activeSubSection === 'inactive' ? 'Arrendatarios Inactivos' :
             'Lista de Arrendatarios'}
          </h3>
          {loadingTenants ? (
            <p className="text-gray-600">Cargando arrendatarios...</p>
          ) : filteredTenants.length === 0 ? (
            <p className="text-gray-600">No hay arrendatarios para mostrar en esta categoría.</p>
          ) : (
            <>
              <div className="mb-4 text-right space-x-2">
                <button
                  onClick={handlePrintTenantList}
                  className="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-opacity-50 transition duration-150 ease-in-out"
                  disabled={filteredTenants.length === 0}
                >
                  🖨️ Imprimir Lista (Navegador)
                </button>
                <button
                  onClick={handleDownloadTenantListPdf}
                  className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50 transition duration-150 ease-in-out"
                  disabled={filteredTenants.length === 0}
                >
                  ⬇️ Descargar Lista PDF
                </button>
              </div>
              <div ref={tenantListRef} className="overflow-x-auto shadow-md rounded-lg">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre</th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Departamento</th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Teléfono</th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Inicio Contrato</th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fin Contrato</th>
                      <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Pago Total ($)</th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {filteredTenants.map((tenant) => (
                      <tr key={tenant.id}>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{tenant.nombre} {tenant.apellido}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{tenant.departamentoAsignado}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{tenant.telefono || 'N/A'}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{tenant.email || 'N/A'}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{tenant.fechaInicioContrato ? tenant.fechaInicioContrato.toDate().toLocaleDateString() : 'N/A'}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{tenant.fechaFinContrato ? tenant.fechaFinContrato.toDate().toLocaleDateString() : 'N/A'}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-right">${tenant.pagoTotalRentaMensual ? tenant.pagoTotalRentaMensual.toFixed(2) : '0.00'}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm">
                          <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${tenant.estado === 'activo' ? 'bg-green-100 text-green-800' : tenant.estado === 'bajaTemporal' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'}`}>
                            {tenant.estado ? tenant.estado.charAt(0).toUpperCase() + tenant.estado.slice(1) : 'N/A'}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                          <div className="flex space-x-2">
                            <button
                              onClick={() => handleEditTenant(tenant)}
                              className="text-yellow-600 hover:text-yellow-900"
                            >
                              Editar
                            </button>
                            <button
                              onClick={() => handleDeleteTenant(tenant.id)}
                              className="text-red-600 hover:text-red-900"
                            >
                              Eliminar
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </>
          )}
        </div>
      )}

      {activeSubSection === 'details' && (
        <div className="mt-8">
          <h3 className="text-xl font-semibold text-gray-700 mb-3">Datos del Arrendatario</h3>
          <div className="mb-4">
            <label htmlFor="tenantSelectForDetails" className="block text-sm font-medium text-gray-700">Seleccionar Arrendatario:</label>
            {loadingTenants ? (
              <p className="mt-1 text-gray-600">Cargando arrendatarios...</p>
            ) : (
              <select
                id="tenantSelectForDetails"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2"
                value={selectedTenantForDetails ? selectedTenantForDetails.id : ''}
                onChange={(e) => {
                  const tenant = tenants.find(t => t.id === e.target.value);
                  setSelectedTenantForDetails(tenant);
                }}
              >
                <option value="">-- Selecciona un arrendatario --</option>
                {tenants.map(tenant => (
                  <option key={tenant.id} value={tenant.id}>
                    {tenant.nombre} {tenant.apellido} (Depto: {tenant.departamentoAsignado})
                  </option>
                ))}
              </select>
            )}
          </div>

          {selectedTenantForDetails ? (
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h4 className="text-lg font-bold text-blue-800 mb-4">Detalles de {selectedTenantForDetails.nombre} {selectedTenantForDetails.apellido}</h4>
              <div className="mb-4 text-right space-x-2">
                <button
                  onClick={handlePrintTenantDetails}
                  className="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-opacity-50 transition duration-150 ease-in-out"
                >
                  🖨️ Imprimir Detalles
                </button>
                <button
                  onClick={handleDownloadTenantDetailsPdf}
                  className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50 transition duration-150 ease-in-out"
                >
                  ⬇️ Descargar Detalles PDF
                </button>
              </div>
              <div ref={tenantDetailsRef} className="overflow-x-auto shadow-md rounded-lg">
                <table className="min-w-full divide-y divide-gray-200">
                  <tbody className="bg-white divide-y divide-gray-200">
                    <tr className="bg-gray-50"><td colSpan="2" className="px-6 py-3 text-left text-sm font-semibold text-blue-700 uppercase tracking-wider">Contrato y Departamento</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Departamento Asignado:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.departamentoAsignado || 'N/A'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Número de Control:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.numeroControl || 'N/A'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Fecha de Ingreso (Contrato):</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.fechaIngreso ? selectedTenantForDetails.fechaIngreso.toDate().toLocaleDateString() : 'N/A'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Fecha Real de Ingreso:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.fechaRealIngreso ? selectedTenantForDetails.fechaRealIngreso.toDate().toLocaleDateString() : 'N/A'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Fecha Inicio Contrato:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.fechaInicioContrato ? selectedTenantForDetails.fechaInicioContrato.toDate().toLocaleDateString() : 'N/A'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Fecha Fin Contrato:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.fechaFinContrato ? selectedTenantForDetails.fechaFinContrato.toDate().toLocaleDateString() : 'N/A'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Día de Pago de la Renta:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.diaPagoRenta || 'N/A'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Estado:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.estado ? selectedTenantForDetails.estado.charAt(0).toUpperCase() + selectedTenantForDetails.estado.slice(1) : 'N/A'}</td></tr>

                    <tr className="bg-gray-50"><td colSpan="2" className="px-6 py-3 text-left text-sm font-semibold text-blue-700 uppercase tracking-wider">Datos Personales</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Nombre:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.nombre || 'N/A'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Apellido:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.apellido || 'N/A'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">RFC:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.rfc || 'N/A'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">CURP:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.curp || 'N/A'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Fecha de Nacimiento:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.fechaNacimiento ? selectedTenantForDetails.fechaNacimiento.toDate().toLocaleDateString() : 'N/A'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Lugar de Nacimiento:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.lugarNacimiento || 'N/A'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Tipo de Identificación:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.identificacion || 'N/A'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Número de Identificación:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.identificacionNumero || 'N/A'}</td></tr>

                    <tr className="bg-gray-50"><td colSpan="2" className="px-6 py-3 text-left text-sm font-semibold text-blue-700 uppercase tracking-wider">Contacto y Empleo</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Teléfono:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.telefono || 'N/A'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Email:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.email || 'N/A'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Empresa de Trabajo:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.empresaTrabajo || 'N/A'}</td></tr>

                    <tr className="bg-gray-50"><td colSpan="2" className="px-6 py-3 text-left text-sm font-semibold text-blue-700 uppercase tracking-wider">Referencias Personales</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Referencia 1 Nombre:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.referencia1Nombre || 'N/A'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Referencia 1 Teléfono:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.referencia1Telefono || 'N/A'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Referencia 2 Nombre:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.referencia2Nombre || 'N/A'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Referencia 2 Teléfono:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.referencia2Telefono || 'N/A'}</td></tr>

                    <tr className="bg-gray-50"><td colSpan="2" className="px-6 py-3 text-left text-sm font-semibold text-blue-700 uppercase tracking-wider">Detalles de Renta</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Número de Ocupantes:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.numeroOcupantes || 'N/A'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Renta Mensual Base:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">${selectedTenantForDetails.rentaMensualBase ? selectedTenantForDetails.rentaMensualBase.toFixed(2) : '0.00'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Depósito Base:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">${selectedTenantForDetails.depositoBase ? selectedTenantForDetails.depositoBase.toFixed(2) : '0.00'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Estado del Depósito:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">{selectedTenantForDetails.estadoDeposito ? selectedTenantForDetails.estadoDeposito.charAt(0).toUpperCase() + selectedTenantForDetails.estadoDeposito.slice(1).replace('_', ' ') : 'N/A'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Cargo Ocupante Extra:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">${selectedTenantForDetails.cargoOcupanteExtra ? selectedTenantForDetails.cargoOcupanteExtra.toFixed(2) : '0.00'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-nowrap text-sm font-medium text-gray-900">Pago Total Renta Mensual:</td><td className="px-6 py-2 whitespace-nowrap text-sm text-gray-700">${selectedTenantForDetails.pagoTotalRentaMensual ? selectedTenantForDetails.pagoTotalRentaMensual.toFixed(2) : '0.00'}</td></tr>
                    <tr><td className="px-6 py-2 whitespace-normal text-sm font-medium text-gray-900">Comentarios:</td><td className="px-6 py-2 whitespace-normal text-sm text-gray-700">{selectedTenantForDetails.comentarios || 'N/A'}</td></tr>
                  </tbody>
                </table>
              </div>
            </div>
          ) : (
            <p className="text-gray-600">Selecciona un arrendatario de la lista desplegable para ver sus datos detallados.</p>
          )}
        </div>
      )}
    </SectionCard>
  );
};

const PagosSection = ({ activeSubSection, setActiveSubSection }) => {
  const { showModal } = useContext(FirebaseContext);
  useEffect(() => {
    if (activeSubSection) {
      showModal("Información", `Navegando a la subsección de Pagos: ${activeSubSection}`);
    }
  }, [activeSubSection, showModal]);
  return (
    <SectionCard title="Gestión de Pagos">
      <p>Contenido para la sección de Pagos. Subsección activa: {activeSubSection || 'Ninguna'}</p>
      {/* Añadir formularios/tablas para pagos aquí */}
    </SectionCard>
  );
};

// Función para convertir número a palabras en español (simplificada, solo para fines de demostración)
const numberToWords = (num) => {
  const units = ['', 'UNO', 'DOS', 'TRES', 'CUATRO', 'CINCO', 'SEIS', 'SIETE', 'OCHO', 'NUEVE'];
  const teens = ['DIEZ', 'ONCE', 'DOCE', 'TRECE', 'CATORCE', 'QUINCE', 'DIECISÉIS', 'DIECISIETE', 'DIECIOCHO', 'DIECINUEVE'];
  const tens = ['', '', 'VEINTE', 'TREINTA', 'CUARENTA', 'CINCUENTA', 'SESENTA', 'SETENTA', 'OCHENTA', 'NOVETTA'];
  const hundreds = ['', 'CIENTO', 'DOSCIENTOS', 'TRESCIENTOS', 'CUATROCIENTOS', 'QUINIENTOS', 'SEISCIENTOS', 'SETECIENTOS', 'OCHOCIENTOS', 'NOVECIENTOS'];

  const convertLessThanOneThousand = (n) => {
    if (n === 0) return '';
    if (n < 10) return units[n];
    if (n < 20) return teens[n - 10];
    if (n < 100) {
      const unit = n % 10;
      const ten = Math.floor(n / 10);
      return tens[ten] + (unit !== 0 ? ' Y ' + units[unit] : '');
    }
    if (n === 100) return 'CIEN'; // Special case for 100
    const hundred = Math.floor(n / 100);
    const remainder = n % 100;
    return hundreds[hundred] + (remainder !== 0 ? ' ' + convertLessThanOneThousand(remainder) : '');
  };

  if (num === 0) return 'CERO';

  let integerPart = Math.floor(num);
  let decimalPart = Math.round((num - integerPart) * 100); // Obtener los centavos

  let integerWords = '';
  if (integerPart >= 1000000) {
    integerWords += convertLessThanOneThousand(Math.floor(integerPart / 1000000)) + ' MILLONES ';
    integerPart %= 1000000;
  }
  if (integerPart >= 1000) {
    integerWords += convertLessThanOneThousand(Math.floor(integerPart / 1000)) + ' MIL ';
    integerPart %= 1000;
  }
  integerWords += convertLessThanOneThousand(integerPart);

  let result = integerWords.trim() + ' PESOS';
  if (decimalPart > 0) {
    result += ` ${decimalPart.toString().padStart(2, '0')}/100 M.N.`;
  } else {
    result += ' 00/100 M.N.';
  }

  return result.toUpperCase();
};


// Componente para la sección de Contratos
const ContratosSection = ({ activeSubSection, setActiveSubSection }) => {
  const { db, userId, showModal } = useContext(FirebaseContext);
  const [arrendatarios, setArrendatarios] = useState([]);
  const [departamentos, setDepartments] = useState([]);
  const [loadingData, setLoadingData] = useState(true);
  const [selectedArrendatario, setSelectedArrendatario] = useState(null);
  const [selectedDepartamento, setSelectedDepartamento] = useState(null);
  const [generatedContract, setGeneratedContract] = useState('');
  const [savedContracts, setSavedContracts] = useState([]); // Nuevo estado para contratos guardados

  // Cargar arrendatarios y departamentos
  useEffect(() => {
    if (!db || !userId) return;

    const fetchAllData = async () => {
      setLoadingData(true);
      try {
        const tenantsColRef = collection(db, `artifacts/${__app_id}/users/${userId}/arrendatarios`);
        const departmentsColRef = collection(db, `artifacts/${__app_id}/users/${userId}/departamentos`);

        const [tenantsSnapshot, departmentsSnapshot] = await Promise.all([
          getDocs(tenantsColRef),
          getDocs(departmentsColRef)
        ]);

        const tenantsList = tenantsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        const departmentsList = departmentsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));

        setArrendatarios(tenantsList);
        setDepartments(departmentsList);
      } catch (error) {
        console.error("Error al cargar datos para contratos:", error);
        showModal("Error de Carga", `No se pudieron cargar los datos necesarios: ${error.message}`);
      } finally {
        setLoadingData(false);
      }
    };

    fetchAllData();

    // Listener para contratos guardados
    const contractsColRef = collection(db, `artifacts/${__app_id}/users/${userId}/contratos`);
    const unsubscribeContracts = onSnapshot(contractsColRef, (snapshot) => {
      const contractsList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setSavedContracts(contractsList);
    }, (error) => {
      console.error("Error al cargar contratos guardados:", error);
      showModal("Error de Carga", `No se pudieron cargar los contratos guardados: ${error.message}`);
    });

    return () => unsubscribeContracts();
  }, [db, userId, showModal]);

  // Manejar selección de arrendatario
  const handleArrendatarioSelect = (e) => {
    const arrendatarioId = e.target.value;
    const tenant = arrendatarios.find(a => a.id === arrendatarioId);
    setSelectedArrendatario(tenant);
    if (tenant && tenant.departamentoAsignado) {
      const dept = departamentos.find(d => d.numeroDepartamento === tenant.departamentoAsignado);
      setSelectedDepartamento(dept);
    } else {
      setSelectedDepartamento(null);
    }
    // Limpiar el contrato generado al cambiar de arrendatario para forzar una nueva generación
    setGeneratedContract('');
  };

  // Manejar selección de departamento (si se permite cambiar, aunque la lógica actual lo toma del arrendatario)
  const handleDepartamentoSelect = (e) => {
    const deptNumber = e.target.value;
    const dept = departamentos.find(d => d.numeroDepartamento === deptNumber);
    setSelectedDepartamento(dept);
    // Limpiar el contrato generado al cambiar de departamento para forzar una nueva generación
    setGeneratedContract('');
  };

  const generateContractContent = () => {
    if (!selectedArrendatario || !selectedDepartamento) {
      showModal("Error de Generación", "Por favor, selecciona un arrendatario y un departamento válidos.");
      return "";
    }

    // Datos del Arrendatario
    const {
      nombre, apellido, identificacion, identificacionNumero, rfc, curp, fechaNacimiento, lugarNacimiento,
      telefono, email, empresaTrabajo, referencia1Nombre, referencia1Telefono, referencia2Nombre, referencia2Telefono,
      numeroOcupantes, depositoBase, pagoTotalRentaMensual, fechaInicioContrato, fechaFinContrato, diaPagoRenta
    } = selectedArrendatario;

    // Datos del Departamento
    const {
      numeroDepartamento, ocupantesMaximos, cargoAdicionalOcupanteExtra,
      calle, numeroExterior, numeroInterior, colonia, ciudad, estadoDireccion, codigoPostal
    } = selectedDepartamento;

    // Datos del Arrendador (Propietario) - HARDCODED POR AHORA, SE PUEDE HACER CONFIGURABLE
    const arrendadorNombre = "DANIEL GARCIA SOSA"; // Reemplazar con el nombre real
    const arrendadorIdentificacionTipo = "INE"; // Reemplazar con el tipo de identificación real
    const arrendadorIdentificacionNum = "GASD681231A56"; // Reemplazar con el número de identificación real
    const arrendadorDireccion = "CALLE PINO 318 COL. LAS TORRES, DE ESTA CIUDAD, TIJUANA B.C."; // Reemplazar con la dirección real del arrendador

    // Formateo de Fechas
    const fechaContratoObj = fechaInicioContrato.toDate();
    const diaContrato = fechaContratoObj.getDate();
    const mesContrato = fechaContratoObj.toLocaleString('es-ES', { month: 'long' }).toUpperCase(); // Mes completo
    const añoContrato = fechaContratoObj.getFullYear();

    const fechaInicioContratoFormatted = fechaInicioContrato ? fechaInicioContrato.toDate().toLocaleDateString('es-ES', { day: '2-digit', month: 'long', year: 'numeric' }).toUpperCase() : 'FECHA NO ESPECIFICADA';
    const fechaFinContratoFormatted = fechaFinContrato ? fechaFinContrato.toDate().toLocaleDateString('es-ES', { day: '2-digit', month: 'long', year: 'numeric' }).toUpperCase() : 'FECHA NO ESPECIFICADA';

    // Calcular duración del contrato en días
    const diffTime = Math.abs(fechaFinContrato.toDate().getTime() - fechaInicioContrato.toDate().getTime());
    const duracionContratoDias = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    // Conversión de números a palabras
    const depositoBaseWords = numberToWords(depositoBase);
    const pagoTotalRentaMensualWords = numberToWords(pagoTotalRentaMensual);

    // Cálculo de personas adicionales y cargo
    const numOcupantes = parseInt(numeroOcupantes) || 0;
    const maxOcupantes = parseInt(ocupantesMaximos) || 0;
    const personasAdicionales = numOcupantes > maxOcupantes
      ? numOcupantes - maxOcupantes
      : 0;
    const cargoPorOcupanteExtra = parseFloat(cargoAdicionalOcupanteExtra) || 0;
    const cargoAdicionalTotal = personasAdicionales * cargoPorOcupanteExtra;
    const cargoAdicionalTexto = personasAdicionales > 0
      ? `$${cargoAdicionalTotal.toFixed(2)} (${numberToWords(cargoAdicionalTotal)}) por las ${personasAdicionales} personas extra.`
      : "SIN CARGO ADICIONAL.";

    // Debugging logs to verify data
    console.log("--- DEBUG: Datos para Contrato ---");
    console.log("Arrendatario:", selectedArrendatario);
    console.log("Departamento:", selectedDepartamento);
    console.log("Fecha Inicio Contrato (Timestamp):", fechaInicioContrato);
    console.log("Fecha Fin Contrato (Timestamp):", fechaFinContrato);
    console.log("Depósito Base:", depositoBase, "en palabras:", depositoBaseWords);
    console.log("Pago Total Renta Mensual:", pagoTotalRentaMensual, "en palabras:", pagoTotalRentaMensualWords);
    console.log("Personas Adicionales:", personasAdicionales);
    console.log("Cargo Adicional Total:", cargoAdicionalTotal);
    console.log("---------------------------------");


    let contractText = `
CONTRATO DE ARRENDAMIENTO

En la ciudad de Tijuana B.C., a ${diaContrato} de ${mesContrato} de ${añoContrato}.

REUNIDOS

Por una parte, como ARRENDADOR, el C. ${arrendadorNombre}, quien se identifica con ${arrendadorIdentificacionTipo} número ${arrendadorIdentificacionNum}, y con domicilio en ${arrendadorDireccion}.

Por otra parte, como ARRENDATARIO, el C. ${nombre} ${apellido}, quien se identificó con credencial del ${identificacion || 'N/A'} número ${identificacionNumero || 'N/A'}, con RFC: ${rfc || 'N/A'}, CURP: ${curp || 'N/A'}, nacido el ${fechaNacimiento ? fechaNacimiento.toDate().toLocaleDateString('es-ES', { day: '2-digit', month: 'long', year: 'numeric' }).toUpperCase() : 'N/A'} en ${lugarNacimiento || 'N/A'}.
Con teléfono: ${telefono || 'N/A'} y correo electrónico: ${email || 'N/A'}.
Trabaja en: ${empresaTrabajo || 'N/A'}.
Referencias personales:
1. ${referencia1Nombre || 'N/A'} - Teléfono: ${referencia1Telefono || 'N/A'}
2. ${referencia2Nombre || 'N/A'} - Teléfono: ${referencia2Telefono || 'N/A'}

DECLARACIONES

I. Declara el ARRENDADOR ser legítimo propietario del inmueble ubicado en:
   Calle: ${calle || 'N/A'}
   Número Exterior: ${numeroExterior || 'N/A'}
   Número Interior: ${numeroInterior || ''}
   Colonia: ${colonia || 'N/A'}
   Ciudad: ${ciudad || 'N/A'}
   Estado: ${estadoDireccion || 'N/A'}
   Código Postal: ${codigoPostal || 'N/A'}
   (En adelante "EL INMUEBLE").

II. Declara el ARRENDATARIO su interés en arrendar EL INMUEBLE para su uso exclusivo de casa habitación, manifestando que lo utilizará para ${numOcupantes} personas, siendo el límite de ocupantes para el departamento ${maxOcupantes}.

CLÁUSULAS

PRIMERA.- OBJETO DEL CONTRATO. El ARRENDADOR cede en arrendamiento a el ARRENDATARIO, y este último toma en tal concepto, EL INMUEBLE descrito en la Declaración I.

SEGUNDA.- RENTA. El precio del arrendamiento es de $${pagoTotalRentaMensual.toFixed(2)} (${pagoTotalRentaMensualWords}) mensuales. Dicho monto incluye un cargo adicional de ${cargoAdicionalTexto} por superar el límite de ocupantes establecido para EL INMUEBLE.

TERCERA.- DEPÓSITO EN GARANTÍA. El ARRENDATARIO entrega en este acto al ARRENDADOR, la cantidad de $${depositoBase.toFixed(2)} (${depositoBaseWords}) como depósito en garantía del fiel cumplimiento de las obligaciones pactadas en este contrato.

CUARTA.- PLAZO. El término del presente contrato es de ${duracionContratoDias} días, iniciando el día ${fechaInicioContratoFormatted} y finalizando el día ${fechaFinContratoFormatted}.

QUINTA.- FORMA Y LUGAR DE PAGO. El pago de la renta se realizará el día ${diaPagoRenta} de cada mes, en el domicilio del inmueble arrendado ubicado en ${calle} ${numeroExterior}, Col. ${colonia}, de esta ciudad, o donde el ARRENDADOR lo indique por escrito. El número de cuenta para referencia es: ${numeroDepartamento}.

SEXTA.- USO DEL INMUEBLE. EL ARRENDATARIO se obliga a utilizar EL INMUEBLE exclusivamente para casa habitación, quedando prohibido darle cualquier otro uso.

SÉPTIMA.- MANTENIMIENTO Y REPARACIONES. Las reparaciones menores y el mantenimiento ordinario de EL INMUEBLE serán por cuenta del ARRENDATARIO. Las reparaciones mayores por vicios ocultos o deterioro natural serán responsabilidad del ARRENDADOR.

OCTAVA.- RESCISIÓN. Serán causas de rescisión del presente contrato, además de las establecidas por la ley, el incumplimiento de cualquiera de las cláusulas aquí estipuladas.

NOVENA.- JURISDICCIÓN. Para la interpretación y cumplimiento del presente contrato, las partes se someten a la jurisdicción de los tribunales de Tijuana, Baja California, renunciando a cualquier otro fuero que por razón de sus domicilios presentes o futuros les pudiera corresponder.

REGLAMENTO INTERNO:
1.- Pagar la renta en la fecha de vencimiento estipulada en el contrato de arrendamiento.
2.- Mantener limpio el departamento y áreas de uso común, no dejar bolsas con basura en los pasillos. Las bolsas grandes cerradas, sobrantes de comida en bolsa cerrada, cajas grandes y de pizza, deben ir en el espacio que está sobre los tambos. El camión recolector de basura pasa los viernes, sacar la basura un día antes.
3.- Los muebles pesados como son colchones, refrigeradores, etc., no se los lleva el camión recolector de basura; es obligación de quien los deseche pagar por tirarlos, por ningún motivo deben dejarlos en el área de depósito basura o en los pasillos y espacios dentro del edificio.
4.- Es obligatorio cerrar la puerta de acceso al edificio, al entrar o al salir.
5.- El arrendatario no asume ninguna responsabilidad en el caso de robo, extravío de pertenencias del arrendatario dentro y fuera del departamento rentado.
6.- Escuchar aparatos de sonido a volumen bajo (hasta las 10 de la noche, excepto días festivos 24, 25 y 31 de diciembre y 1 de enero).
7.- Para realizar algún evento o convivio, en los patios del edificio, deberá ser notificado con anticipación al arrendador o administrador, (por razones propias de espacio, no están permitidas las carnes asadas al carbón, no deben obstruir los pasillos, excepto los días señalados en el numeral 6.
8.- El horario permitido para la realización de eventos o convivios permitido es hasta las 12 de la noche.
9.- El arrendatario que reciba visita de personas ajenas será responsable de los actos de su visitante (el horario para visitas es hasta las 10 de la noche).
10.- No se permiten mascotas dentro y fuera del departamento.
11.- El departamento deberá ser ocupado por el número de personas declaradas al rentar el departamento; en caso de requerir de personas adicionales, deberá ser notificado al arrendador o administrador, y cubrir el importe declarado en la cláusula segunda de este contrato.
12.- Por las autoridades correspondientes y por la administración, no está permitido el consumo de ningún enervante, dentro y fuera del departamento arrendado.
13.- El arrendatario está obligado a notificar al arrendador o administrador de fugas de agua, o fallas en las instalaciones eléctricas; queda prohibido que el arrendatario manipule los medidores de agua y luz.
14.- Por ninguna razón está permitido el uso de parrillas eléctricas.
15.- Ningún departamento cuenta con espacio para guardar carros dentro del edificio; queda estrictamente prohibido que los visitantes con carro o moto se estacionen en la entrada principal al edificio.
16.- Por desgaste de uso, si es necesario cambiar la chapa de la puerta de entrada al edificio, el arrendatario solo cubrirá el costo por cada llave que necesite.
17.- Respeto mutuo entre arrendatarios, incluyendo al arrendador y administrador.
18.- Todos y cada uno de los arrendatarios deberán apegarse al presente reglamento, de lo contrario estarán sujetos a no renovar el contrato a su vencimiento.
19.- No está permitido el uso de lavadoras dentro de los departamentos, salvo si hay espacio disponible en el departamento arrendado.
20.- Ningún percance no contemplado en el reglamento interno se solucionará entre el arrendatario y el arrendador.
21.- El arrendatario ${nombre} ${apellido}, ratifica el presente reglamento interno, quedando enterado a la firma de este. Acepta cumplir y respetar lo declarado.

OCTAVA.- ES OBLIGATORIO de cada uno de los arrendatarios CERRAR al entrar o al salir la puerta de entrada al EDIFICIO, de lo contrario, en caso de robo físico o material que llegase a sufrir algún ARRENDATARIO, dentro y fuera de los DEPARTAMENTOS, de las instalaciones del EDIFICIO, OBLIGATORIAMENTE por NEGLIGENCIA de su parte, a cubrir los gastos que esto genere. Con esto liberando al ARRENDADOR de toda RESPONSABILIDAD.

NOVENA.- Queda prohibido al arrendatario ceder, traspasar, o de alguna forma transferir todos o parte de los derechos derivados del departamento que ampara este contrato, así como le está prohibido subarrendar todo o parte del departamento objeto de este contrato.

DECIMA.- Se comprende en arrendamiento el uso de las instalaciones de luz, eléctrica, del agua, baños, las cuales serán devueltas en condiciones de funcionalidad junto con el DEPARTAMENTO al arrendador.

DECIMA PRIMERA.- El inquilino no podrá efectuar modificación alguna a la estructura ni a la distribución interior del departamento sin previa autorización en manera verbal o escrita del arrendador y si llegará a hacerse careciendo de conocimiento de este, será responsable de los daños y perjuicios que ocasione, estableciéndose además que las mejoras de cualquier índole que el arrendatario realice con la autorización del arrendador, quedaran gratuitamente a beneficio de este, mismo que se importe sea deducible de las rentas, sin que haya reclamación alguna a la terminación del contrato de arrendamiento.

DECIMA SEGUNDA.- Queda convenido que la sola presentación de este contrato en juicio, o como fundamento de la demanda, será prueba suficiente de la existencia del arrendamiento, de las personalidades de los contratantes, de las firmas que lo calzan, así como su ratificación, asimismo la no presentación por parte del arrendatario de los recibos de haber pagado la renta establecida, acreditará plenamente la falta de cumplimiento del presente contrato.

DECIMA TERCERA.- El arrendatario acepta que de llegarse a promover en su contra demanda judicial por haber incurrido en mora, por que habiendo expirado la vigencia del contrato no haya desocupado por haber subarrendado a tercera persona, o por cualquier otra causa o e imponga la sola presentación del escrito respectivo ante el juzgado civil que corresponda, le obligará pagar al arrendador una pena consistente en el cincuenta por ciento (50 %) de las rentas de un año, calculándose dicho porcentaje sobre el alquiler mensual que está vigente al inicio del litigio. Además de que se cobrarán los honorarios como los mensualidades vencidas y no pagadas en la cantidad aquí pactada, más el quince por ciento (15 %) de ellas.

DECIMA CUARTA.- El consumo de energía eléctrica, alumbrado de pasillos, agua, recolección de basura y demás servicios son a cargo del arrendatario quien se compromete a mantener el DEPARTAMENTO en perfectas condiciones, y lo está recibiendo, al entregar el término del contrato será responsable económicamente del faltante, daños y mantenimiento necesarios a satisfacción del arrendador. A su vez al momento de la entrega del departamento, deberá entregar el finiquito de la luz, agua. Y recolección de basura.

DECIMA QUINTA.- Queda convenido que los blanqueros, pintura interior y exterior y todas las reparaciones o composturas menores, entre ellas, grifería, carpintería, luz eléctrica, etc. Serán por cuenta exclusiva del ARRENDATARIO renunciando gratis a posibles reclamaciones.

DECIMA SEXTA.- En lo referente a los aumentos de la renta, se tendrá como base el equivalente al índice de inflación del año inmediato anterior dictaminado por el Banco de México S. A., y un porcentaje adicional que fijaran ambas partes para adecuarlo a la inflación real que se tenga proyectada.

DECIMA OCTAVA – EXTINCION DE DOMINIO:
A) Que en sus actividades ha incurrido en la comisión de delito alguno, incluyendo los que establece la ley federal de "extinción de dominio".
B) Que los recursos que destina y/o destinará al pago de la renta y la constitución del depósito provienen y/o provendrán de fuentes ilícitas.
C) Que tomará las medidas necesarias para que durante la vigencia de este contrato o sus prorrogas y mientras se encuentre en posesión del inmueble, evitar que cualquier persona a la que permita el ingreso al inmueble, realice actividades de hechos ilícitos que involucren al inmueble, particularmente a aquellos a los que se refieren la ley federal de extinción de dominio.
D) Que libera al "arrendador" de toda responsabilidad en la que pudiera verse involucrado, derivado de la comisión de delitos consumados o no, dentro o fuera del inmueble.

Se levanta este presente contrato, quedando un ejemplar a cada suscriptor de este, en el lugar y fecha señalado y previa ratificación de todas y cada una de sus partes, para legalidad lo rubrican con sus firmas que usan, tanto para sus asuntos públicos y privados.

_________________________
C. ${arrendadorNombre}
ARRENDADOR

_________________________
C. ${nombre} ${apellido}
ARRENDATARIO

_________________________
TESTIGO 1
NOMBRE Y FIRMA

_________________________
TESTIGO 2
NOMBRE Y FIRMA
`;
    return contractText.trim();
  };

  const handleGenerateContract = () => {
    const contract = generateContractContent();
    if (contract) {
      setGeneratedContract(contract);
      showModal("Contrato Generado", "El contrato ha sido generado y está listo para revisar y guardar.");
    } else {
      console.error("Failed to generate contract due to internal logic or missing data not caught by initial checks.");
    }
  };

  const handleSaveContract = async () => {
    console.log("handleSaveContract called.");
    console.log("generatedContract length:", generatedContract.length);

    if (!generatedContract) {
      showModal("Error", "No hay contrato generado para guardar.");
      return;
    }
    if (!selectedArrendatario || !selectedDepartamento) {
      showModal("Error", "Por favor, selecciona un arrendatario y un departamento válidos antes de guardar.");
      return;
    }

    if (!db || !userId) {
      showModal("Error", "Base de datos no disponible.");
      return;
    }

    try {
      const contractsColRef = collection(db, `artifacts/${__app_id}/users/${userId}/contratos`);
      const docRef = await addDoc(contractsColRef, {
        arrendatarioId: selectedArrendatario.id,
        departamentoId: selectedDepartamento.id,
        arrendatarioNombre: `${selectedArrendatario.nombre} ${selectedArrendatario.apellido}`,
        departamentoNumero: selectedDepartamento.numeroDepartamento,
        fechaGeneracion: Timestamp.now(),
        contenido: generatedContract,
        numeroCuenta: selectedDepartamento.numeroDepartamento,
        fechaContrato: selectedArrendatario.fechaInicioContrato,
        diaPagoMensual: selectedArrendatario.diaPagoRenta,
        duracionContratoDias: Math.ceil(Math.abs(selectedArrendatario.fechaFinContrato.toDate().getTime() - selectedArrendatario.fechaInicioContrato.toDate().getTime()) / (1000 * 60 * 60 * 24)),
        fechaInicioContratoArrendatario: selectedArrendatario.fechaInicioContrato,
        fechaFinContratoArrendatario: selectedArrendatario.fechaFinContrato,
      });
      console.log("Contract saved with ID:", docRef.id);
      showModal("Éxito", "Contrato guardado correctamente en la base de datos.");
      setGeneratedContract(''); // Limpiar el contrato generado después de guardar
      // Opcional: limpiar el formulario o resetear selecciones
      setSelectedArrendatario(null);
      setSelectedDepartamento(null);
    }
    catch (error) {
      console.error("Error al guardar contrato:", error);
      showModal("Error", `No se pudo guardar el contrato: ${error.message}`);
    }
  };

  const handleDiscardContract = () => {
    showModal("Confirmar Descarte", "¿Estás seguro de que quieres descartar el contrato actual? Se perderán los cambios no guardados.", () => {
      setSelectedArrendatario(null);
      setSelectedDepartamento(null);
      setGeneratedContract('');
      showModal("Descartado", "El contrato actual ha sido descartado.");
    });
  };

  const handleDeleteContract = (contractId) => {
    showModal("Confirmar Eliminación", "¿Estás seguro de que quieres eliminar este contrato? Esta acción no se puede deshacer.", async () => {
      if (!db || !userId) {
        showModal("Error", "Base de datos no disponible.");
        return;
      }
      try {
        const docRef = doc(db, `artifacts/${__app_id}/users/${userId}/contratos`, contractId);
        await deleteDoc(docRef);
        showModal("Éxito", "Contrato eliminado correctamente.");
      } catch (error) {
        console.error("Error al eliminar contrato:", error);
        showModal("Error", `No se pudo eliminar el contrato: ${error.message}`);
      }
    });
  };

  // Función para imprimir el contrato generado (usa window.print())
  const handlePrintContractBrowser = (contractContent, tenantName, deptNumber) => {
    printHtmlContent(contractContent, `Contrato ${tenantName} Depto ${deptNumber}`);
    showModal("Impresión Iniciada", "Se ha iniciado la impresión del contrato a través del navegador.");
  };

  // Función para descargar el contrato como PDF (usa html2pdf.js)
  const handleDownloadContractPdf = (contractContent, tenantName, deptNumber) => {
    if (typeof window.html2pdf === 'undefined') {
      showModal("Error", "La librería de PDF no se ha cargado correctamente. Por favor, recargue la página.");
      return;
    }
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = contractContent;

    window.html2pdf().from(tempDiv).set({
      margin: 1,
      filename: `Contrato_${tenantName.replace(/\s/g, '_')}_Depto_${deptNumber}.pdf`,
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2 },
      jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
    }).save();
    showModal("PDF Generado", "El contrato ha sido generado como PDF y se ha iniciado la descarga.");
  };


  return (
    <SectionCard title="Gestión de Contratos">
      {activeSubSection === 'newContract' && (
        <div className="mt-4 p-4 bg-blue-50 rounded-lg shadow-inner">
          <h4 className="text-xl font-semibold text-blue-700 mb-4">Generar Nuevo Contrato</h4>
          {loadingData ? (
            <p className="text-gray-600">Cargando datos de arrendatarios y departamentos...</p>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* Selección de Arrendatario */}
              <div className="col-span-1">
                <label htmlFor="arrendatarioSelect" className="block text-sm font-medium text-gray-700">Seleccionar Arrendatario</label>
                <select
                  id="arrendatarioSelect"
                  value={selectedArrendatario ? selectedArrendatario.id : ''}
                  onChange={handleArrendatarioSelect}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2"
                >
                  <option value="">-- Selecciona un arrendatario --</option>
                  {arrendatarios.map(arrendatario => (
                    <option key={arrendatario.id} value={arrendatario.id}>
                      {arrendatario.nombre} {arrendatario.apellido} (Depto: {arrendatario.departamentoAsignado})
                    </option>
                  ))}
                </select>
              </div>

              {/* Selección de Departamento (auto-rellenado por arrendatario, pero se podría permitir cambiar si es necesario) */}
              <div className="col-span-1">
                <label htmlFor="departamentoSelect" className="block text-sm font-medium text-gray-700">Departamento Asignado</label>
                <select
                  id="departamentoSelect"
                  value={selectedDepartamento ? selectedDepartamento.numeroDepartamento : ''}
                  onChange={handleDepartamentoSelect}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-gray-100 p-2"
                  disabled // Deshabilitado porque se auto-selecciona con el arrendatario
                >
                  <option value="">-- Departamento --</option>
                  {departamentos.map(dept => (
                    <option key={dept.id} value={dept.numeroDepartamento}>
                      {dept.numeroDepartamento}
                    </option>
                  ))}
                </select>
              </div>

              {/* Datos del Arrendatario y Departamento (Auto-rellenados) */}
              <div className="col-span-full border-t pt-4 mt-4">
                <h5 className="text-lg font-semibold text-gray-800 mb-2">Datos del Contrato (Auto-rellenados)</h5>
                {selectedArrendatario && selectedDepartamento ? (
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm text-gray-700">
                    <p><strong>Número de Cuenta:</strong> {selectedDepartamento.numeroDepartamento}</p>
                    <p><strong>Fecha del Contrato:</strong> {selectedArrendatario.fechaInicioContrato ? selectedArrendatario.fechaInicioContrato.toDate().toLocaleDateString() : 'N/A'}</p>
                    <p><strong>Día de Pago Mensual:</strong> {selectedArrendatario.diaPagoRenta || 'N/A'}</p>
                    <p><strong>Fecha Inicio Contrato:</strong> {selectedArrendatario.fechaInicioContrato ? selectedArrendatario.fechaInicioContrato.toDate().toLocaleDateString() : 'N/A'}</p>
                    <p><strong>Fecha Fin Contrato:</strong> {selectedArrendatario.fechaFinContrato ? selectedArrendatario.fechaFinContrato.toDate().toLocaleDateString() : 'N/A'}</p>
                    <p><strong>Duración del Contrato (días):</strong> {
                      selectedArrendatario.fechaInicioContrato && selectedArrendatario.fechaFinContrato
                        ? Math.ceil(Math.abs(selectedArrendatario.fechaFinContrato.toDate().getTime() - selectedArrendatario.fechaInicioContrato.toDate().getTime()) / (1000 * 60 * 60 * 24))
                        : 'N/A'
                    }</p>
                    {/* Otros datos auto-rellenados relevantes para el resumen del contrato */}
                    <p><strong>Nombre Completo:</strong> {selectedArrendatario.nombre} {selectedArrendatario.apellido}</p>
                    <p><strong>RFC:</strong> {selectedArrendatario.rfc || 'N/A'}</p>
                    <p><strong>Número de Departamento:</strong> {selectedDepartamento.numeroDepartamento}</p>
                    <p><strong>Depósito Base Arrendatario:</strong> ${selectedArrendatario.depositoBase ? selectedArrendatario.depositoBase.toFixed(2) : '0.00'}</p>
                    <p><strong>Renta Mensual Total:</strong> ${selectedArrendatario.pagoTotalRentaMensual ? selectedArrendatario.pagoTotalRentaMensual.toFixed(2) : '0.00'}</p>
                    <p><strong>Ocupantes Arrendatario:</strong> {selectedArrendatario.numeroOcupantes}</p>
                    <p><strong>Ocupantes Máximos Depto:</strong> {selectedDepartamento.ocupantesMaximos}</p>
                    <p><strong>Cargo Extra por Ocupante:</strong> ${selectedDepartamento.cargoAdicionalOcupanteExtra ? selectedDepartamento.cargoAdicionalOcupanteExtra.toFixed(2) : '0.00'}</p>
                    <p><strong>Dirección del Departamento:</strong> {selectedDepartamento.calle} #${selectedDepartamento.numeroExterior} {selectedDepartamento.numeroInterior && `Int. ${selectedDepartamento.numeroInterior}`}, {selectedDepartamento.colonia}, {selectedDepartamento.ciudad}, {selectedDepartamento.estadoDireccion} C.P. {selectedDepartamento.codigoPostal}</p>
                  </div>
                ) : (
                  <p className="text-gray-600">Selecciona un arrendatario para ver los datos auto-rellenados del contrato.</p>
                )}
              </div>

              {/* Botones de Acción */}
              <div className="col-span-full flex justify-end space-x-3 mt-6">
                <button
                  onClick={handleGenerateContract}
                  className="px-6 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 transition duration-150 ease-in-out"
                  disabled={!selectedArrendatario || !selectedDepartamento}
                >
                  Generar Contrato
                </button>
                <button
                  onClick={() => handlePrintContractBrowser(generatedContract, selectedArrendatario.nombre + ' ' + selectedArrendatario.apellido, selectedDepartamento.numeroDepartamento)}
                  className="px-6 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-opacity-50 transition duration-150 ease-in-out"
                  disabled={!generatedContract} // Disabled if no contract is generated
                >
                  🖨️ Imprimir Contrato (Navegador)
                </button>
                <button
                  onClick={() => handleDownloadContractPdf(generatedContract, selectedArrendatario.nombre + ' ' + selectedArrendatario.apellido, selectedDepartamento.numeroDepartamento)}
                  className="px-6 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50 transition duration-150 ease-in-out"
                  disabled={!generatedContract} // Disabled if no contract is generated
                >
                  ⬇️ Descargar Contrato PDF
                </button>
                <button
                  onClick={handleSaveContract}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition duration-150 ease-in-out"
                  disabled={!generatedContract}
                >
                  Guardar Contrato
                </button>
                <button
                  onClick={handleDiscardContract}
                  className="px-6 py-2 bg-gray-400 text-gray-800 rounded-md hover:bg-gray-500 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50 transition duration-150 ease-in-out"
                  disabled={!selectedArrendatario && !generatedContract} // Habilitar si hay algo que descartar
                >
                  Descartar Contrato
                </button>
              </div>

              {/* Área para mostrar el contrato generado */}
              {generatedContract && (
                <div className="col-span-full mt-6 bg-gray-100 p-4 rounded-md border border-gray-300">
                  <h5 className="text-lg font-semibold text-gray-800 mb-2">Contrato Generado:</h5>
                  <textarea
                    value={generatedContract}
                    rows="20"
                    readOnly
                    className="w-full p-3 border border-gray-300 rounded-md font-mono text-sm bg-white resize-y"
                  ></textarea>
                </div>
              )}
            </div>
          )}
        </div>
      )}

      {activeSubSection === 'reprintContract' && (
        <div className="mt-4 p-4 bg-green-50 rounded-lg shadow-inner">
          <h4 className="text-xl font-semibold text-green-700 mb-4">Reimprimir Contrato Existente</h4>
          {loadingData ? (
            <p className="text-gray-600">Cargando contratos guardados...</p>
          ) : savedContracts.length === 0 ? (
            <p className="text-gray-600">No hay contratos guardados para reimprimir.</p>
          ) : (
            <div>
              <p className="mb-3 text-gray-700">Selecciona un contrato de la lista para verlo o reimprimirlo:</p>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {savedContracts.map(contract => (
                  <div key={contract.id} className="bg-white border border-gray-200 rounded-lg shadow-sm p-4">
                    <h5 className="text-lg font-bold text-blue-800">Contrato para {contract.arrendatarioNombre}</h5>
                    <p className="text-sm text-gray-700">Depto: {contract.departamentoNumero}</p>
                    <p className="text-sm text-gray-700">Fecha: {contract.fechaGeneracion.toDate().toLocaleDateString()}</p>
                    <div className="mt-3 flex space-x-2">
                      <button
                        onClick={() => handlePrintContractBrowser(contract.contenido, contract.arrendatarioNombre, contract.departamentoNumero)}
                        className="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 text-sm transition duration-150 ease-in-out"
                      >
                        🖨️ Imprimir
                      </button>
                      <button
                        onClick={() => handleDownloadContractPdf(contract.contenido, contract.arrendatarioNombre, contract.departamentoNumero)}
                        className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 text-sm transition duration-150 ease-in-out"
                      >
                        ⬇️ PDF
                      </button>
                      <button
                        onClick={() => handleDeleteContract(contract.id)}
                        className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 text-sm transition duration-150 ease-in-out"
                      >
                        Eliminar
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      )}
      {activeSubSection === null && (
        <p className="text-gray-700">Selecciona una opción del submenú de Contratos.</p>
      )}
    </SectionCard>
  );
};


const NotificacionesSection = ({ activeSubSection, setActiveSubSection }) => {
  const { db, userId, showModal } = useContext(FirebaseContext);
  const [tenants, setTenants] = useState([]);
  const [loadingTenants, setLoadingTenants] = useState(true);

  // Cargar todos los arrendatarios
  useEffect(() => {
    if (!db || !userId) return;

    const tenantsColRef = collection(db, `artifacts/${__app_id}/users/${userId}/arrendatarios`);
    const unsubscribe = onSnapshot(tenantsColRef, (snapshot) => {
      const tenantsList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setTenants(tenantsList);
      setLoadingTenants(false);
    }, (error) => {
      console.error("Error al cargar arrendatarios para notificaciones:", error);
      showModal("Error de Carga", `No se pudieron cargar los arrendatarios para notificaciones: ${error.message}`);
      setLoadingTenants(false);
    });

    return () => unsubscribe();
  }, [db, userId, showModal]);

  // Función para determinar si los datos de un arrendatario están incompletos
  const isTenantDataIncomplete = (tenant) => {
    // Criterios de datos incompletos
    const missingContact = !tenant.telefono || !tenant.email;
    const missingIdentification = !tenant.identificacion || !tenant.identificacionNumero;
    const missingReferences = (!tenant.referencia1Nombre || !tenant.referencia1Telefono) || (!tenant.referencia2Nombre || !tenant.referencia2Telefono);
    const missingRfcOrCurp = !tenant.rfc && !tenant.curp;
    const missingRealEntryDate = !tenant.fechaRealIngreso; // Nuevo criterio

    return missingContact || missingIdentification || missingReferences || missingRfcOrCurp || missingRealEntryDate;
  };

  const incompleteTenants = tenants.filter(isTenantDataIncomplete);

  return (
    <SectionCard title="Gestión de Notificaciones">
      {activeSubSection === 'collectToday' && (
        <div className="mt-4 p-4 bg-blue-50 rounded-lg shadow-inner">
          <h4 className="text-xl font-semibold text-blue-700 mb-4">Cobrar Hoy</h4>
          <p className="text-gray-700">Aquí se mostrarán los cobros de renta que vencen hoy.</p>
          <p className="text-gray-500 mt-2">Esta sección se desarrollará con más detalle en futuras actualizaciones.</p>
        </div>
      )}
      {activeSubSection === 'incompleteTenantData' && (
        <div className="mt-4 p-4 bg-yellow-50 rounded-lg shadow-inner">
          <h4 className="text-xl font-semibold text-yellow-700 mb-4">Datos Incompletos del Arrendatario</h4>
          {loadingTenants ? (
            <p className="text-gray-600">Cargando datos de arrendatarios...</p>
          ) : incompleteTenants.length === 0 ? (
            <p className="text-green-600 font-semibold">✅ ¡Todos los arrendatarios tienen sus datos completos!</p>
          ) : (
            <div>
              <p className="text-gray-700 mb-3">Los siguientes arrendatarios tienen datos incompletos:</p>
              <ul className="list-disc list-inside space-y-2">
                {incompleteTenants.map(tenant => (
                  <li key={tenant.id} className="bg-white p-3 rounded-md shadow-sm border border-yellow-200">
                    <p className="font-semibold text-gray-800">{tenant.nombre} {tenant.apellido} (Depto: {tenant.departamentoAsignado})</p>
                    <ul className="list-disc list-inside ml-4 text-sm text-gray-600">
                      {!tenant.telefono && <li>Falta Teléfono</li>}
                      {!tenant.email && <li>Falta Correo Electrónico</li>}
                      {(!tenant.identificacion || !tenant.identificacionNumero) && <li>Falta Tipo/Número de Identificación</li>}
                      {(!tenant.rfc && !tenant.curp) && <li>Falta RFC o CURP</li>}
                      {(!tenant.referencia1Nombre || !tenant.referencia1Telefono) && <li>Falta Referencia 1 (Nombre o Teléfono)</li>}
                      {(!tenant.referencia2Nombre || !tenant.referencia2Telefono) && <li>Falta Referencia 2 (Nombre o Teléfono)</li>}
                      {!tenant.fechaRealIngreso && <li>Falta Fecha Real de Ingreso</li>}
                    </ul>
                    <button
                      onClick={() => showModal("Detalles del Arrendatario", `Aquí puedes ver los detalles de ${tenant.nombre} ${tenant.apellido} para completar sus datos. (Función de demostración)`)}
                      className="mt-2 px-3 py-1 bg-yellow-600 text-white rounded-md hover:bg-yellow-700 text-xs transition duration-150 ease-in-out"
                    >
                      Ver Detalles
                    </button>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      )}
      {activeSubSection === 'updateTenantData' && (
        <div className="mt-4 p-4 bg-purple-50 rounded-lg shadow-inner">
          <h4 className="text-xl font-semibold text-purple-700 mb-4">Actualizar Datos del Arrendatario</h4>
          <p className="text-gray-700">Aquí podrás buscar y actualizar los datos de un arrendatario existente.</p>
          <p className="text-gray-500 mt-2">Esta sección se vinculará con la funcionalidad de edición de arrendatarios.</p>
        </div>
      )}
      {activeSubSection === 'expiredContracts' && (
        <div className="mt-4 p-4 bg-red-50 rounded-lg shadow-inner">
          <h4 className="text-xl font-semibold text-red-700 mb-4">Contratos Vencidos</h4>
          <p className="text-gray-700">Aquí se mostrarán los contratos de arrendamiento que han vencido.</p>
          <p className="text-gray-500 mt-2">Esta sección se desarrollará con más detalle en futuras actualizaciones.</p>
        </div>
      )}
      {activeSubSection === null && (
        <p className="text-gray-700">Selecciona una opción del submenú de Notificaciones.</p>
      )}
    </SectionCard>
  );
};

const ReportesSection = ({ activeSubSection, setActiveSubSection }) => {
  const { db, userId, showModal } = useContext(FirebaseContext);
  const [tenants, setTenants] = useState([]);
  const [loadingTenants, setLoadingTenants] = useState(true);
  const [selectedTenantForReport, setSelectedTenantForReport] = useState(null);
  const [reportContent, setReportContent] = useState('');
  const reportRef = useRef(null); // Ref to the content to be printed

  // Cargar todos los arrendatarios para el dropdown
  useEffect(() => {
    if (!db || !userId) return;

    const tenantsColRef = collection(db, `artifacts/${__app_id}/users/${userId}/arrendatarios`);
    const unsubscribe = onSnapshot(tenantsColRef, (snapshot) => {
      const tenantsList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setTenants(tenantsList);
      setLoadingTenants(false);
    }, (error) => {
      console.error("Error al cargar arrendatarios para reportes:", error);
      showModal("Error de Carga", `No se pudieron cargar los arrendatarios para reportes: ${error.message}`);
      setLoadingTenants(false);
    });

    return () => unsubscribe();
  }, [db, userId, showModal]);

  // Function to generate mock account statement
  const generateMockAccountStatement = (tenant) => {
    if (!tenant) return "Selecciona un arrendatario para generar el estado de cuenta.";

    // Mock data for payments and charges
    const mockTransactions = [
      { date: '2025-01-01', concept: 'Renta de Enero 2025', charge: tenant.pagoTotalRentaMensual, payment: 0, balance: 0 },
      { date: '2025-01-05', concept: 'Pago Renta Enero', charge: 0, payment: tenant.pagoTotalRentaMensual, balance: 0 },
      { date: '2025-02-01', concept: 'Renta de Febrero 2025', charge: tenant.pagoTotalRentaMensual, payment: 0, balance: 0 },
      { date: '2025-02-10', concept: 'Pago Renta Febrero', charge: 0, payment: tenant.pagoTotalRentaMensual, balance: 0 },
      { date: '2025-03-01', concept: 'Renta de Marzo 2025', charge: tenant.pagoTotalRentaMensual, payment: 0, balance: 0 },
      { date: '2025-03-15', concept: 'Abono extra', charge: 0, payment: 50.00, balance: 0 }
    ];

    let currentBalance = 0;
    const transactionsWithBalance = mockTransactions.map(t => {
      currentBalance += t.charge - t.payment;
      return { ...t, balance: currentBalance };
    });

    let content = `
      <div style="font-family: Arial, sans-serif; padding: 20px;">
        <h1 style="text-align: center; color: #1e40af;">ESTADO DE CUENTA DEL ARRENDATARIO</h1>
        <h2 style="text-align: center; color: #3b82f6;">${tenant.nombre} ${tenant.apellido}</h2>
        <p style="text-align: center; color: #6b7280;">Departamento: ${tenant.departamentoAsignado} | No. Control: ${tenant.numeroControl}</p>
        <p style="text-align: center; color: #6b7280;">Período: Enero - Marzo 2025 (Demostración)</p>
        <br/>
        <table style="width: 100%; border-collapse: collapse;">
          <thead>
            <tr style="background-color: #eff6ff;">
              <th style="border: 1px solid #d1d5db; padding: 8px; text-align: left;">Fecha</th>
              <th style="border: 1px solid #d1d5db; padding: 8px; text-align: left;">Concepto</th>
              <th style="border: 1px solid #d1d5db; padding: 8px; text-align: right;">Cargos ($)</th>
              <th style="border: 1px solid #d1d5db; padding: 8px; text-align: right;">Pagos/Abonos ($)</th>
              <th style="border: 1px solid #d1d5db; padding: 8px; text-align: right;">Saldo ($)</th>
            </tr>
          </thead>
          <tbody>
            ${transactionsWithBalance.map(t => `
              <tr>
                <td style="border: 1px solid #d1d5db; padding: 8px;">${t.date}</td>
                <td style="border: 1px solid #d1d5db; padding: 8px;">${t.concept}</td>
                <td style="border: 1px solid #d1d5db; padding: 8px; text-align: right;">${t.charge.toFixed(2)}</td>
                <td style="border: 1px solid #d1d5db; padding: 8px; text-align: right;">${t.payment.toFixed(2)}</td>
                <td style="border: 1px solid #d1d5db; padding: 8px; text-align: right;">${t.balance.toFixed(2)}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
        <br/>
        <div style="text-align: right; font-weight: bold; color: #1f2937;">
          <p>Saldo Final del Período: $${currentBalance.toFixed(2)}</p>
          <p>Estado del Depósito: ${tenant.estadoDeposito.charAt(0).toUpperCase() + tenant.estadoDeposito.slice(1).replace('_', ' ')}</p>
        </div>
        <br/>
        <p style="font-size: 12px; color: #9ca3af;">Este es un estado de cuenta de demostración. Los datos reales se cargarán una vez implementada la funcionalidad de registro de pagos.</p>
      </div>
    `;
    return content;
  };

  // Función para descargar el PDF del estado de cuenta (usa html2pdf.js)
  const handleDownloadPdfReport = () => {
    if (typeof window.html2pdf === 'undefined') {
      showModal("Error", "La librería de PDF no se ha cargado correctamente. Por favor, recargue la página.");
      return;
    }
    if (!selectedTenantForReport) {
      showModal("Error", "Por favor, selecciona un arrendatario para generar el estado de cuenta.");
      return;
    }
    const content = reportRef.current;
    if (content) {
      window.html2pdf().from(content).set({
        margin: 1,
        filename: `Estado_Cuenta_${selectedTenantForReport.nombre.replace(/\s/g, '_')}_${selectedTenantForReport.apellido.replace(/\s/g, '_')}.pdf`,
        image: { type: 'jpeg', quality: 0.98 },
        html2canvas: { scale: 2 },
        jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
      }).save();
      showModal("PDF Generado", "El estado de cuenta ha sido generado como PDF y se ha iniciado la descarga.");
    } else {
      showModal("Error", "No se pudo generar el contenido del reporte para el PDF.");
    }
  };

  // Función para imprimir el estado de cuenta (usa window.print())
  const handlePrintReportBrowser = () => {
    if (!selectedTenantForReport) {
      showModal("Error", "Por favor, selecciona un arrendatario para imprimir el estado de cuenta.");
      return;
    }
    const htmlContent = generateMockAccountStatement(selectedTenantForReport);
    printHtmlContent(htmlContent, `Estado de Cuenta ${selectedTenantForReport.nombre} ${selectedTenantForReport.apellido}`);
    showModal("Impresión Iniciada", "Se ha iniciado la impresión del estado de cuenta a través del navegador.");
  };


  useEffect(() => {
    if (activeSubSection) {
      showModal("Información", `Navegando a la subsección de Reportes: ${activeSubSection}`);
    }
  }, [activeSubSection, showModal]);

  return (
    <SectionCard title="Reportes">
      {activeSubSection === 'futureCollections' ? (
        <div className="mt-4 p-4 bg-blue-50 rounded-lg shadow-inner">
          <h4 className="text-xl font-semibold text-blue-700 mb-4">Cobros Futuros</h4>
          <p className="text-gray-700">Aquí se mostrarán los cobros de renta programados para el futuro.</p>
          {/* Lógica para mostrar cobros futuros */}
          <p className="text-gray-500 mt-2">Esta sección se desarrollará con más detalle en futuras actualizaciones para mostrar una lista dinámica de cobros pendientes.</p>
        </div>
      ) : activeSubSection === 'tenantAccountStatement' ? (
        <div className="mt-4 p-4 bg-green-50 rounded-lg shadow-inner">
          <h4 className="text-xl font-semibold text-green-700 mb-4">Estado de Cuenta del Arrendatario</h4>
          <p className="text-gray-700 mb-3">Selecciona un arrendatario para generar su estado de cuenta.</p>
          <div className="mb-4">
            <label htmlFor="selectTenantForReport" className="block text-sm font-medium text-gray-700">Seleccionar Arrendatario:</label>
            {loadingTenants ? (
              <p className="mt-1 text-gray-600">Cargando arrendatarios...</p>
            ) : (
              <select
                id="selectTenantForReport"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 p-2"
                value={selectedTenantForReport ? selectedTenantForReport.id : ''}
                onChange={(e) => {
                  const tenant = tenants.find(t => t.id === e.target.value);
                  setSelectedTenantForReport(tenant);
                  setReportContent(generateMockAccountStatement(tenant));
                }}
              >
                <option value="">-- Selecciona un arrendatario --</option>
                {tenants.map(tenant => (
                  <option key={tenant.id} value={tenant.id}>
                    {tenant.nombre} {tenant.apellido} (Depto: {tenant.departamentoAsignado})
                  </option>
                ))}
              </select>
            )}
          </div>
          {selectedTenantForReport && (
            <div className="mb-4 space-x-2">
              <button
                onClick={handleDownloadPdfReport}
                className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 transition duration-150 ease-in-out"
              >
                ⬇️ Descargar Estado de Cuenta PDF
              </button>
              <button
                onClick={handlePrintReportBrowser}
                className="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-opacity-50 transition duration-150 ease-in-out"
              >
                🖨️ Imprimir Estado de Cuenta (Navegador)
              </button>
            </div>
          )}
          {reportContent && (
            <div ref={reportRef} className="bg-white p-4 rounded-md border border-gray-300 overflow-auto max-h-96">
              <div dangerouslySetInnerHTML={{ __html: reportContent }} />
            </div>
          )}
        </div>
      ) : (
        <p className="text-gray-700">Selecciona una opción del submenú de Reportes.</p>
      )}
    </SectionCard>
  );
};


const ConfiguracionSection = () => (
  <SectionCard title="Configuración">
    <p>Contenido para la sección de Configuración.</p>
  </SectionCard>
);

// Nuevo componente para la sección "Acerca de"
const AcercaDeSection = ({ systemInfo, versionLog }) => (
  <SectionCard title="Acerca de este Sistema">
    <div className="bg-blue-50 p-4 rounded-lg shadow-inner mb-6">
      <h3 className="text-xl font-semibold text-blue-700 mb-3">Información del Sistema</h3>
      <p className="text-gray-700"><strong>Nombre del Sistema:</strong> {systemInfo.name}</p>
      <p className="text-gray-700"><strong>Versión Actual:</strong> {systemInfo.version}</p>
      <p className="text-gray-700"><strong>Fecha de la Versión:</strong> {systemInfo.versionDate}</p>
      <p className="text-gray-700"><strong>Fecha de Inicio del Desarrollo:</strong> {systemInfo.developmentStartDate}</p>
      <p className="text-gray-700"><strong>Responsable / Equipo Técnico:</strong> {systemInfo.technicalTeam}</p>
    </div>

    <div className="bg-gray-50 p-4 rounded-lg shadow-inner">
      <h3 className="text-xl font-semibold text-gray-700 mb-3">Bitácora de Versiones</h3>
      {versionLog.length === 0 ? (
        <p className="text-gray-600">No hay historial de versiones disponible.</p>
      ) : (
        <div className="space-y-4">
          {versionLog.map((log, index) => (
            <div key={index} className="border-b pb-3 last:border-b-0">
              <p className="font-bold text-blue-800">Versión {log.version} <span className="font-normal text-gray-600">({log.date})</span></p>
              <p className="text-gray-700 ml-2"> - {log.description}</p>
              <p className="text-sm text-gray-500 ml-2">Responsable: {log.responsible}</p>
            </div>
          ))}
        </div>
      )}
    </div>
  </SectionCard>
);

export default App;
